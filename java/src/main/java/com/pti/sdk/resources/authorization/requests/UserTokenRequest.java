/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.authorization.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserTokenRequest.Builder.class
)
public final class UserTokenRequest {
  private final String url;

  private final Optional<String> metaInformation;

  private final String method;

  private final Map<String, Object> additionalProperties;

  private UserTokenRequest(String url, Optional<String> metaInformation, String method,
      Map<String, Object> additionalProperties) {
    this.url = url;
    this.metaInformation = metaInformation;
    this.method = method;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("url")
  public String getUrl() {
    return url;
  }

  @JsonProperty("metaInformation")
  public Optional<String> getMetaInformation() {
    return metaInformation;
  }

  @JsonProperty("method")
  public String getMethod() {
    return method;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserTokenRequest && equalTo((UserTokenRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UserTokenRequest other) {
    return url.equals(other.url) && metaInformation.equals(other.metaInformation) && method.equals(other.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.url, this.metaInformation, this.method);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UrlStage builder() {
    return new Builder();
  }

  public interface UrlStage {
    MethodStage url(@NotNull String url);

    Builder from(UserTokenRequest other);
  }

  public interface MethodStage {
    _FinalStage method(@NotNull String method);
  }

  public interface _FinalStage {
    UserTokenRequest build();

    _FinalStage metaInformation(Optional<String> metaInformation);

    _FinalStage metaInformation(String metaInformation);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UrlStage, MethodStage, _FinalStage {
    private String url;

    private String method;

    private Optional<String> metaInformation = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(UserTokenRequest other) {
      url(other.getUrl());
      metaInformation(other.getMetaInformation());
      method(other.getMethod());
      return this;
    }

    @Override
    @JsonSetter("url")
    public MethodStage url(@NotNull String url) {
      this.url = Objects.requireNonNull(url, "url must not be null");
      return this;
    }

    @Override
    @JsonSetter("method")
    public _FinalStage method(@NotNull String method) {
      this.method = Objects.requireNonNull(method, "method must not be null");
      return this;
    }

    @Override
    public _FinalStage metaInformation(String metaInformation) {
      this.metaInformation = Optional.ofNullable(metaInformation);
      return this;
    }

    @Override
    @JsonSetter(
        value = "metaInformation",
        nulls = Nulls.SKIP
    )
    public _FinalStage metaInformation(Optional<String> metaInformation) {
      this.metaInformation = metaInformation;
      return this;
    }

    @Override
    public UserTokenRequest build() {
      return new UserTokenRequest(url, metaInformation, method, additionalProperties);
    }
  }
}
