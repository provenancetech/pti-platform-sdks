/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.wallets;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.pti.sdk.core.ClientOptions;
import com.pti.sdk.core.MediaTypes;
import com.pti.sdk.core.ObjectMappers;
import com.pti.sdk.core.PTIClientApiException;
import com.pti.sdk.core.PTIClientException;
import com.pti.sdk.core.RequestOptions;
import com.pti.sdk.errors.BadRequestError;
import com.pti.sdk.errors.ForbiddenError;
import com.pti.sdk.errors.NotFoundError;
import com.pti.sdk.errors.TooManyRequestsError;
import com.pti.sdk.errors.UnauthorizedError;
import com.pti.sdk.resources.wallets.requests.DepositAddressRequest;
import com.pti.sdk.resources.wallets.requests.GetWalletHistoryRequest;
import com.pti.sdk.resources.wallets.requests.SimulateDepositRequest;
import com.pti.sdk.resources.wallets.requests.WalletCreation;
import com.pti.sdk.types.CurrencyAsset;
import com.pti.sdk.types.InvalidRequestError;
import com.pti.sdk.types.UnmanagedError;
import com.pti.sdk.types.Wallet;
import com.pti.sdk.types.WalletHistoryPage;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class WalletsClient {
  protected final ClientOptions clientOptions;

  public WalletsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Retrieves a list of all assets supported by the platform. Each asset includes
   * its currency, type, and, for cryptocurrencies, the networks on which it is
   * supported. This information is useful for wallet operations, transactions,
   * and trading.
   */
  public List<CurrencyAsset> getListOfAssets() {
    return getListOfAssets(null);
  }

  /**
   * Retrieves a list of all assets supported by the platform. Each asset includes
   * its currency, type, and, for cryptocurrencies, the networks on which it is
   * supported. This information is useful for wallet operations, transactions,
   * and trading.
   */
  public List<CurrencyAsset> getListOfAssets(RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("assets")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<CurrencyAsset>>() {});
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Retrieves a list of wallets for a specific user. Each wallet includes the wallet type,
   * unique ID, currency, associated blockchain network (if applicable), optional label,
   * multi-address support flag, and creation date. The endpoint returns up to 100 wallets
   * per request.
   */
  public List<Wallet> getWallets(String userId) {
    return getWallets(userId,null);
  }

  /**
   * Retrieves a list of wallets for a specific user. Each wallet includes the wallet type,
   * unique ID, currency, associated blockchain network (if applicable), optional label,
   * multi-address support flag, and creation date. The endpoint returns up to 100 wallets
   * per request.
   */
  public List<Wallet> getWallets(String userId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<Wallet>>() {});
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Creates a new wallet for a specific user. The request includes the wallet type,
   * a unique wallet ID, the currency, and for cryptocurrencies, the blockchain network.
   * Optional fields include a human-readable label and whether the wallet supports multiple
   * addresses. The newly created wallet can then be used for transactions, deposits, or
   * other wallet-related operations.
   */
  public Wallet createWallet(String userId, WalletCreation request) {
    return createWallet(userId,request,null);
  }

  /**
   * Creates a new wallet for a specific user. The request includes the wallet type,
   * a unique wallet ID, the currency, and for cryptocurrencies, the blockchain network.
   * Optional fields include a human-readable label and whether the wallet supports multiple
   * addresses. The newly created wallet can then be used for transactions, deposits, or
   * other wallet-related operations.
   */
  public Wallet createWallet(String userId, WalletCreation request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Wallet.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Retrieves a specific wallet for a user by its walletId. The response includes the
   * wallet's currency, network, type, optional label, balance information, creation
   * timestamp, and other relevant metadata.
   */
  public Wallet getWallet(String userId, String walletId) {
    return getWallet(userId,walletId,null);
  }

  /**
   * Retrieves a specific wallet for a user by its walletId. The response includes the
   * wallet's currency, network, type, optional label, balance information, creation
   * timestamp, and other relevant metadata.
   */
  public Wallet getWallet(String userId, String walletId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Wallet.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Deletes a specific wallet for the given user. The wallet to be deleted is identified
   * by its walletId. Only wallets with a zero balance can be deleted; wallets containing
   * funds cannot be removed. Once deleted, the wallet and any associated metadata will
   * no longer be accessible.
   */
  public void deleteWallet(String userId, String walletId) {
    deleteWallet(userId,walletId,null);
  }

  /**
   * Deletes a specific wallet for the given user. The wallet to be deleted is identified
   * by its walletId. Only wallets with a zero balance can be deleted; wallets containing
   * funds cannot be removed. Once deleted, the wallet and any associated metadata will
   * no longer be accessible.
   */
  public void deleteWallet(String userId, String walletId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("DELETE", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return;
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Simulates a deposit into a user's wallet without actually processing a real
   * transaction. The request specifies the amount and the payment method type.
   * The response provides the expected result of the deposit, including status
   * and any applicable metadata, allowing you to validate transaction behavior
   * before executing real deposits.
   */
  public void simulateWalletDeposit(String userId, String walletId) {
    simulateWalletDeposit(userId,walletId,SimulateDepositRequest.builder().build());
  }

  /**
   * Simulates a deposit into a user's wallet without actually processing a real
   * transaction. The request specifies the amount and the payment method type.
   * The response provides the expected result of the deposit, including status
   * and any applicable metadata, allowing you to validate transaction behavior
   * before executing real deposits.
   */
  public void simulateWalletDeposit(String userId, String walletId,
      SimulateDepositRequest request) {
    simulateWalletDeposit(userId,walletId,request,null);
  }

  /**
   * Simulates a deposit into a user's wallet without actually processing a real
   * transaction. The request specifies the amount and the payment method type.
   * The response provides the expected result of the deposit, including status
   * and any applicable metadata, allowing you to validate transaction behavior
   * before executing real deposits.
   */
  public void simulateWalletDeposit(String userId, String walletId, SimulateDepositRequest request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .addPathSegments("simulate-deposit")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return;
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Creates a new deposit address for a user's cryptocurrency wallet.
   * This allows the user to receive crypto deposits on the specified wallet.
   * The response includes the wallet details along with its deposit instructions.
   */
  public Wallet createWalletDepositAddress(String userId, String walletId) {
    return createWalletDepositAddress(userId,walletId,DepositAddressRequest.builder().build());
  }

  /**
   * Creates a new deposit address for a user's cryptocurrency wallet.
   * This allows the user to receive crypto deposits on the specified wallet.
   * The response includes the wallet details along with its deposit instructions.
   */
  public Wallet createWalletDepositAddress(String userId, String walletId,
      DepositAddressRequest request) {
    return createWalletDepositAddress(userId,walletId,request,null);
  }

  /**
   * Creates a new deposit address for a user's cryptocurrency wallet.
   * This allows the user to receive crypto deposits on the specified wallet.
   * The response includes the wallet details along with its deposit instructions.
   */
  public Wallet createWalletDepositAddress(String userId, String walletId,
      DepositAddressRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .addPathSegments("deposit-address")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Wallet.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Creates a virtual bank account associated with a user's wallet.
   * This account can be used to receive fiat deposits directly into the wallet.
   * The response returns the wallet details along with the virtual bank account
   * and its deposit instruction.
   */
  public Wallet createWalletVirtualBankAccount(String userId, String walletId,
      Map<String, Object> request) {
    return createWalletVirtualBankAccount(userId,walletId,request,null);
  }

  /**
   * Creates a virtual bank account associated with a user's wallet.
   * This account can be used to receive fiat deposits directly into the wallet.
   * The response returns the wallet details along with the virtual bank account
   * and its deposit instruction.
   */
  public Wallet createWalletVirtualBankAccount(String userId, String walletId,
      Map<String, Object> request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .addPathSegments("virtual-bank-account")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Wallet.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Generates wire transfer instructions for a user's wallet to facilitate
   * fiat deposits. The response includes the wallet details along with
   * the generated wire instructions for completing the deposit.
   */
  public Wallet generateWireInstructions(String userId, String walletId,
      Map<String, Object> request) {
    return generateWireInstructions(userId,walletId,request,null);
  }

  /**
   * Generates wire transfer instructions for a user's wallet to facilitate
   * fiat deposits. The response includes the wallet details along with
   * the generated wire instructions for completing the deposit.
   */
  public Wallet generateWireInstructions(String userId, String walletId,
      Map<String, Object> request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .addPathSegments("wire-instructions")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Wallet.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * Retrieves the historical balance and transaction records for a specific user's wallet.
   * Supports pagination using <code>page</code> and <code>size</code> query parameters. Each entry in the history
   * includes details about deposits, withdrawals, and other balance-affecting operations.
   */
  public WalletHistoryPage getWalletHistory(String userId, String walletId) {
    return getWalletHistory(userId,walletId,GetWalletHistoryRequest.builder().build());
  }

  /**
   * Retrieves the historical balance and transaction records for a specific user's wallet.
   * Supports pagination using <code>page</code> and <code>size</code> query parameters. Each entry in the history
   * includes details about deposits, withdrawals, and other balance-affecting operations.
   */
  public WalletHistoryPage getWalletHistory(String userId, String walletId,
      GetWalletHistoryRequest request) {
    return getWalletHistory(userId,walletId,request,null);
  }

  /**
   * Retrieves the historical balance and transaction records for a specific user's wallet.
   * Supports pagination using <code>page</code> and <code>size</code> query parameters. Each entry in the history
   * includes details about deposits, withdrawals, and other balance-affecting operations.
   */
  public WalletHistoryPage getWalletHistory(String userId, String walletId,
      GetWalletHistoryRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(userId)
      .addPathSegments("wallets")
      .addPathSegment(walletId)
      .addPathSegments("history");if (request.getPage().isPresent()) {
        httpUrl.addQueryParameter("page", request.getPage().get().toString());
      }
      if (request.getSize().isPresent()) {
        httpUrl.addQueryParameter("size", request.getSize().get().toString());
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), WalletHistoryPage.class);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        try {
          switch (response.code()) {
            case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
            case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          }
        }
        catch (JsonProcessingException ignored) {
          // unable to map error response, throwing generic error
        }
        throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new PTIClientException("Network error executing HTTP request", e);
      }
    }
  }
