/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.executetransaction;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.pti.sdk.core.ClientOptions;
import com.pti.sdk.core.MediaTypes;
import com.pti.sdk.core.ObjectMappers;
import com.pti.sdk.core.PTIClientApiException;
import com.pti.sdk.core.PTIClientException;
import com.pti.sdk.core.RequestOptions;
import com.pti.sdk.errors.BadRequestError;
import com.pti.sdk.errors.ForbiddenError;
import com.pti.sdk.errors.NotFoundError;
import com.pti.sdk.errors.TooManyRequestsError;
import com.pti.sdk.errors.UnauthorizedError;
import com.pti.sdk.errors.UnprocessableEntityError;
import com.pti.sdk.resources.executetransaction.requests.ExecuteDepositTransaction;
import com.pti.sdk.resources.executetransaction.requests.ExecuteMintTransaction;
import com.pti.sdk.resources.executetransaction.requests.ExecutePaymentTransaction;
import com.pti.sdk.resources.executetransaction.requests.ExecuteTradeTransaction;
import com.pti.sdk.resources.executetransaction.requests.ExecuteTransferTransaction;
import com.pti.sdk.resources.executetransaction.requests.ExecuteWithdrawalTransaction;
import com.pti.sdk.resources.executetransaction.requests.TransactionUpdate;
import com.pti.sdk.types.InvalidRequestError;
import com.pti.sdk.types.ObjectReference;
import com.pti.sdk.types.OneOfAssessmentValidationError;
import com.pti.sdk.types.TransactionStatusObject;
import com.pti.sdk.types.UnmanagedError;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class ExecuteTransactionClient {
  protected final ClientOptions clientOptions;

  public ExecuteTransactionClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * This endpoint is used to execute a deposit (crypto/fiat -in) transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference deposit(ExecuteDepositTransaction request) {
    return deposit(request,null);
  }

  /**
   * This endpoint is used to execute a deposit (crypto/fiat -in) transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference deposit(ExecuteDepositTransaction request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/deposits")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("sourceMethod", request.getSourceMethod());
    if (request.getDestinationMethod().isPresent()) {
      properties.put("destinationMethod", request.getDestinationMethod());
    }
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint is used to execute a withdrawal of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference withdrawal(ExecuteWithdrawalTransaction request) {
    return withdrawal(request,null);
  }

  /**
   * This endpoint is used to execute a withdrawal of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference withdrawal(ExecuteWithdrawalTransaction request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/withdrawals")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("destinationMethod", request.getDestinationMethod());
    if (request.getSourceMethod().isPresent()) {
      properties.put("sourceMethod", request.getSourceMethod());
    }
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint is used to execute a generic payment of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference payment(ExecutePaymentTransaction request) {
    return payment(request,null);
  }

  /**
   * This endpoint is used to execute a generic payment of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference payment(ExecutePaymentTransaction request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/payments")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("sourceMethod", request.getSourceMethod());
    if (request.getDestinationMethod().isPresent()) {
      properties.put("destinationMethod", request.getDestinationMethod());
    }
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint is used to execute a transfer between users. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference transfer(ExecuteTransferTransaction request) {
    return transfer(request,null);
  }

  /**
   * This endpoint is used to execute a transfer between users. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference transfer(ExecuteTransferTransaction request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/transfers")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("sourceTransferMethod", request.getSourceTransferMethod());
    properties.put("destinationTransferMethod", request.getDestinationTransferMethod());
    properties.put("destination", request.getDestination());
    if (request.getDestinationClientId().isPresent()) {
      properties.put("destinationClientId", request.getDestinationClientId());
    }
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint is used to execute a trade between currencies and crypto. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference trade(ExecuteTradeTransaction request) {
    return trade(request,null);
  }

  /**
   * This endpoint is used to execute a trade between currencies and crypto. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference trade(ExecuteTradeTransaction request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/trades")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("sourceMethod", request.getSourceMethod());
    properties.put("destinationMethod", request.getDestinationMethod());
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint is used to execute a mint transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference mint(ExecuteMintTransaction request) {
    return mint(request,null);
  }

  /**
   * This endpoint is used to execute a mint transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.
   */
  public ObjectReference mint(ExecuteMintTransaction request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions/mints")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("destination", request.getDestination());
    properties.put("destinationMethod", request.getDestinationMethod());
    properties.put("type", request.getType());
    if (request.getTransactionGroupId().isPresent()) {
      properties.put("transactionGroupId", request.getTransactionGroupId());
    }
    if (request.getSubClientId().isPresent()) {
      properties.put("subClientId", request.getSubClientId());
    }
    if (request.getTransactionTotal().isPresent()) {
      properties.put("transactionTotal", request.getTransactionTotal());
    }
    if (request.getUsdValue().isPresent()) {
      properties.put("usdValue", request.getUsdValue());
    }
    properties.put("amount", request.getAmount());
    properties.put("date", request.getDate());
    properties.put("initiator", request.getInitiator());
    if (request.getPtiMeta().isPresent()) {
      properties.put("ptiMeta", request.getPtiMeta());
    }
    if (request.getClientMeta().isPresent()) {
      properties.put("clientMeta", request.getClientMeta());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    _requestBuilder.addHeader("x-pti-request-id", request.getPtiRequestId());
    _requestBuilder.addHeader("x-pti-scenario-id", request.getPtiScenarioId());
    if (request.getPtiSessionId().isPresent()) {
      _requestBuilder.addHeader("x-pti-session-id", request.getPtiSessionId().get());
    }
    if (request.getPtiDisableWebhook().isPresent()) {
      _requestBuilder.addHeader("x-pti-disable-webhook", request.getPtiDisableWebhook().get().toString());
    }
    if (request.getPtiProviderName().isPresent()) {
      _requestBuilder.addHeader("x-pti-provider-name", request.getPtiProviderName().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 403:throw new ForbiddenError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, OneOfAssessmentValidationError.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  public TransactionStatusObject getTransaction(String requestId) {
    return getTransaction(requestId,null);
  }

  public TransactionStatusObject getTransaction(String requestId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions")
      .addPathSegment(requestId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TransactionStatusObject.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  public void deleteTransaction(String requestId) {
    deleteTransaction(requestId,null);
  }

  public void deleteTransaction(String requestId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions")
      .addPathSegment(requestId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("DELETE", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return;
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }

  /**
   * This endpoint allows adding feedback information to an existing transaction. Here are the possible feedback values with their meaning:
   * <p>| Feedback           | Meaning                                                                                                                                                                                                            |
   * | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | <code>ACCEPTED</code>         | The transaction was accepted by the processor and is deemed to be in a pending state. This feedback is not a final state and should be followed by antoher feedback such as <code>SETTLED</code> or <code>CANCELLED</code>               |
   * | <code>SETTLED</code>          | The transaction was accepted and fully finalized by the processor. The transfer of value has occured.                                                                                                              |
   * | <code>CANCELLED</code>        | The transaction was accepted but cancelled prior to being settled                                                                                                                                                  |
   * | <code>AWAITING_PAYMENT</code> | A deposit transaction is being processed and is in a state where it is waiting for the user to complete the payment by funding the target address provided or making a deposit using the specified payment method. |
   * | <code>REJECTED</code>         | The transaction was declined by the processor                                                                                                                                                                      |
   * | <code>REFUNDED</code>         | An intentional, settled transaction was refunded                                                                                                                                                                   |
   * | <code>CHARGED_BACK</code>     | A settled transaction was disputed and refunded                                                                                                                                                                    |
   * | <code>ERROR</code>            | The processor returned an error, the transaction is assumed to be non existent from the processor standpoint                                                                                                       |</p>
   */
  public ObjectReference provideFeedback(String requestId, TransactionUpdate request) {
    return provideFeedback(requestId,request,null);
  }

  /**
   * This endpoint allows adding feedback information to an existing transaction. Here are the possible feedback values with their meaning:
   * <p>| Feedback           | Meaning                                                                                                                                                                                                            |
   * | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | <code>ACCEPTED</code>         | The transaction was accepted by the processor and is deemed to be in a pending state. This feedback is not a final state and should be followed by antoher feedback such as <code>SETTLED</code> or <code>CANCELLED</code>               |
   * | <code>SETTLED</code>          | The transaction was accepted and fully finalized by the processor. The transfer of value has occured.                                                                                                              |
   * | <code>CANCELLED</code>        | The transaction was accepted but cancelled prior to being settled                                                                                                                                                  |
   * | <code>AWAITING_PAYMENT</code> | A deposit transaction is being processed and is in a state where it is waiting for the user to complete the payment by funding the target address provided or making a deposit using the specified payment method. |
   * | <code>REJECTED</code>         | The transaction was declined by the processor                                                                                                                                                                      |
   * | <code>REFUNDED</code>         | An intentional, settled transaction was refunded                                                                                                                                                                   |
   * | <code>CHARGED_BACK</code>     | A settled transaction was disputed and refunded                                                                                                                                                                    |
   * | <code>ERROR</code>            | The processor returned an error, the transaction is assumed to be non existent from the processor standpoint                                                                                                       |</p>
   */
  public ObjectReference provideFeedback(String requestId, TransactionUpdate request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("transactions")
      .addPathSegment(requestId)
      .addPathSegments("updates")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PTIClientException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObjectReference.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, InvalidRequestError.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, UnmanagedError.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 429:throw new TooManyRequestsError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new PTIClientApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new PTIClientException("Network error executing HTTP request", e);
    }
  }
}
