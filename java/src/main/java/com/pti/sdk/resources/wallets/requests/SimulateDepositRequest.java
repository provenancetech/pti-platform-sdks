/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.wallets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import com.pti.sdk.types.PaymentMethodType;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SimulateDepositRequest.Builder.class
)
public final class SimulateDepositRequest {
  private final Optional<Double> amount;

  private final Optional<PaymentMethodType> paymentMethodType;

  private final Optional<String> status;

  private final Optional<String> requestId;

  private final Map<String, Object> additionalProperties;

  private SimulateDepositRequest(Optional<Double> amount,
      Optional<PaymentMethodType> paymentMethodType, Optional<String> status,
      Optional<String> requestId, Map<String, Object> additionalProperties) {
    this.amount = amount;
    this.paymentMethodType = paymentMethodType;
    this.status = status;
    this.requestId = requestId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("amount")
  public Optional<Double> getAmount() {
    return amount;
  }

  @JsonProperty("paymentMethodType")
  public Optional<PaymentMethodType> getPaymentMethodType() {
    return paymentMethodType;
  }

  @JsonProperty("status")
  public Optional<String> getStatus() {
    return status;
  }

  @JsonProperty("requestId")
  public Optional<String> getRequestId() {
    return requestId;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SimulateDepositRequest && equalTo((SimulateDepositRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(SimulateDepositRequest other) {
    return amount.equals(other.amount) && paymentMethodType.equals(other.paymentMethodType) && status.equals(other.status) && requestId.equals(other.requestId);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.amount, this.paymentMethodType, this.status, this.requestId);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> amount = Optional.empty();

    private Optional<PaymentMethodType> paymentMethodType = Optional.empty();

    private Optional<String> status = Optional.empty();

    private Optional<String> requestId = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(SimulateDepositRequest other) {
      amount(other.getAmount());
      paymentMethodType(other.getPaymentMethodType());
      status(other.getStatus());
      requestId(other.getRequestId());
      return this;
    }

    @JsonSetter(
        value = "amount",
        nulls = Nulls.SKIP
    )
    public Builder amount(Optional<Double> amount) {
      this.amount = amount;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = Optional.ofNullable(amount);
      return this;
    }

    @JsonSetter(
        value = "paymentMethodType",
        nulls = Nulls.SKIP
    )
    public Builder paymentMethodType(Optional<PaymentMethodType> paymentMethodType) {
      this.paymentMethodType = paymentMethodType;
      return this;
    }

    public Builder paymentMethodType(PaymentMethodType paymentMethodType) {
      this.paymentMethodType = Optional.ofNullable(paymentMethodType);
      return this;
    }

    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public Builder status(Optional<String> status) {
      this.status = status;
      return this;
    }

    public Builder status(String status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    @JsonSetter(
        value = "requestId",
        nulls = Nulls.SKIP
    )
    public Builder requestId(Optional<String> requestId) {
      this.requestId = requestId;
      return this;
    }

    public Builder requestId(String requestId) {
      this.requestId = Optional.ofNullable(requestId);
      return this;
    }

    public SimulateDepositRequest build() {
      return new SimulateDepositRequest(amount, paymentMethodType, status, requestId, additionalProperties);
    }
  }
}
