/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.marketplace.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SearchClientWalletsRequest.Builder.class
)
public final class SearchClientWalletsRequest {
  private final Optional<Integer> page;

  private final Optional<Integer> size;

  private final Optional<String> sortBy;

  private final Optional<String> sortDirection;

  private final Optional<String> filters;

  private final Map<String, Object> additionalProperties;

  private SearchClientWalletsRequest(Optional<Integer> page, Optional<Integer> size,
      Optional<String> sortBy, Optional<String> sortDirection, Optional<String> filters,
      Map<String, Object> additionalProperties) {
    this.page = page;
    this.size = size;
    this.sortBy = sortBy;
    this.sortDirection = sortDirection;
    this.filters = filters;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Offset for pagination. If not specified, the default value is 0.
   */
  @JsonProperty("page")
  public Optional<Integer> getPage() {
    return page;
  }

  /**
   * @return Page size for pagination. If not specified, the default value is 20.
   */
  @JsonProperty("size")
  public Optional<Integer> getSize() {
    return size;
  }

  /**
   * @return Sort by field. If not specified, the default value is creationDate.
   */
  @JsonProperty("sortBy")
  public Optional<String> getSortBy() {
    return sortBy;
  }

  /**
   * @return Sort direction field. ASC or DESC, default value is DESC.
   */
  @JsonProperty("sortDirection")
  public Optional<String> getSortDirection() {
    return sortDirection;
  }

  /**
   * @return Allows you to apply different filters on your users Wallets.
   * balance: Filter for wallets with an available balance above a numerical value. currency: Filter for wallets matching given currency. network: Filter for wallets belonging to the specified network. userId: Filter on a list of specific users in a comma separated value format.
   * Multiple different filters can be used and acts like an AND between them.
   * Example: filters=userIds:123,324;currency:ETH;network:Ethereum Should return all wallets belonging to users 123 or 324 having network Ethereum and currency ETH
   */
  @JsonProperty("filters")
  public Optional<String> getFilters() {
    return filters;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SearchClientWalletsRequest && equalTo((SearchClientWalletsRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(SearchClientWalletsRequest other) {
    return page.equals(other.page) && size.equals(other.size) && sortBy.equals(other.sortBy) && sortDirection.equals(other.sortDirection) && filters.equals(other.filters);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.page, this.size, this.sortBy, this.sortDirection, this.filters);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> page = Optional.empty();

    private Optional<Integer> size = Optional.empty();

    private Optional<String> sortBy = Optional.empty();

    private Optional<String> sortDirection = Optional.empty();

    private Optional<String> filters = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(SearchClientWalletsRequest other) {
      page(other.getPage());
      size(other.getSize());
      sortBy(other.getSortBy());
      sortDirection(other.getSortDirection());
      filters(other.getFilters());
      return this;
    }

    @JsonSetter(
        value = "page",
        nulls = Nulls.SKIP
    )
    public Builder page(Optional<Integer> page) {
      this.page = page;
      return this;
    }

    public Builder page(Integer page) {
      this.page = Optional.ofNullable(page);
      return this;
    }

    @JsonSetter(
        value = "size",
        nulls = Nulls.SKIP
    )
    public Builder size(Optional<Integer> size) {
      this.size = size;
      return this;
    }

    public Builder size(Integer size) {
      this.size = Optional.ofNullable(size);
      return this;
    }

    @JsonSetter(
        value = "sortBy",
        nulls = Nulls.SKIP
    )
    public Builder sortBy(Optional<String> sortBy) {
      this.sortBy = sortBy;
      return this;
    }

    public Builder sortBy(String sortBy) {
      this.sortBy = Optional.ofNullable(sortBy);
      return this;
    }

    @JsonSetter(
        value = "sortDirection",
        nulls = Nulls.SKIP
    )
    public Builder sortDirection(Optional<String> sortDirection) {
      this.sortDirection = sortDirection;
      return this;
    }

    public Builder sortDirection(String sortDirection) {
      this.sortDirection = Optional.ofNullable(sortDirection);
      return this;
    }

    @JsonSetter(
        value = "filters",
        nulls = Nulls.SKIP
    )
    public Builder filters(Optional<String> filters) {
      this.filters = filters;
      return this;
    }

    public Builder filters(String filters) {
      this.filters = Optional.ofNullable(filters);
      return this;
    }

    public SearchClientWalletsRequest build() {
      return new SearchClientWalletsRequest(page, size, sortBy, sortDirection, filters, additionalProperties);
    }
  }
}
