/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.wallets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = DepositAddressRequest.Builder.class
)
public final class DepositAddressRequest {
  private final Optional<Boolean> multiWalletAddress;

  private final Map<String, Object> additionalProperties;

  private DepositAddressRequest(Optional<Boolean> multiWalletAddress,
      Map<String, Object> additionalProperties) {
    this.multiWalletAddress = multiWalletAddress;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("multiWalletAddress")
  public Optional<Boolean> getMultiWalletAddress() {
    return multiWalletAddress;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DepositAddressRequest && equalTo((DepositAddressRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(DepositAddressRequest other) {
    return multiWalletAddress.equals(other.multiWalletAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.multiWalletAddress);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Boolean> multiWalletAddress = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(DepositAddressRequest other) {
      multiWalletAddress(other.getMultiWalletAddress());
      return this;
    }

    @JsonSetter(
        value = "multiWalletAddress",
        nulls = Nulls.SKIP
    )
    public Builder multiWalletAddress(Optional<Boolean> multiWalletAddress) {
      this.multiWalletAddress = multiWalletAddress;
      return this;
    }

    public Builder multiWalletAddress(Boolean multiWalletAddress) {
      this.multiWalletAddress = Optional.ofNullable(multiWalletAddress);
      return this;
    }

    public DepositAddressRequest build() {
      return new DepositAddressRequest(multiWalletAddress, additionalProperties);
    }
  }
}
