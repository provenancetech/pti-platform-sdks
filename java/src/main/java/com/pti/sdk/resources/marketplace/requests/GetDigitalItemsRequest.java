/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.marketplace.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GetDigitalItemsRequest.Builder.class
)
public final class GetDigitalItemsRequest {
  private final Optional<Integer> page;

  private final Optional<Integer> size;

  private final Optional<String> sortBy;

  private final Map<String, Object> additionalProperties;

  private GetDigitalItemsRequest(Optional<Integer> page, Optional<Integer> size,
      Optional<String> sortBy, Map<String, Object> additionalProperties) {
    this.page = page;
    this.size = size;
    this.sortBy = sortBy;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Offset for pagination. If not specified, the default value is 0.
   */
  @JsonProperty("page")
  public Optional<Integer> getPage() {
    return page;
  }

  /**
   * @return Page size for pagination. If not specified, the default value is 20.
   */
  @JsonProperty("size")
  public Optional<Integer> getSize() {
    return size;
  }

  /**
   * @return Sort by field. If not specified, the default value is creationDate.
   */
  @JsonProperty("sortBy")
  public Optional<String> getSortBy() {
    return sortBy;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetDigitalItemsRequest && equalTo((GetDigitalItemsRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GetDigitalItemsRequest other) {
    return page.equals(other.page) && size.equals(other.size) && sortBy.equals(other.sortBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.page, this.size, this.sortBy);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> page = Optional.empty();

    private Optional<Integer> size = Optional.empty();

    private Optional<String> sortBy = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(GetDigitalItemsRequest other) {
      page(other.getPage());
      size(other.getSize());
      sortBy(other.getSortBy());
      return this;
    }

    @JsonSetter(
        value = "page",
        nulls = Nulls.SKIP
    )
    public Builder page(Optional<Integer> page) {
      this.page = page;
      return this;
    }

    public Builder page(Integer page) {
      this.page = Optional.ofNullable(page);
      return this;
    }

    @JsonSetter(
        value = "size",
        nulls = Nulls.SKIP
    )
    public Builder size(Optional<Integer> size) {
      this.size = size;
      return this;
    }

    public Builder size(Integer size) {
      this.size = Optional.ofNullable(size);
      return this;
    }

    @JsonSetter(
        value = "sortBy",
        nulls = Nulls.SKIP
    )
    public Builder sortBy(Optional<String> sortBy) {
      this.sortBy = sortBy;
      return this;
    }

    public Builder sortBy(String sortBy) {
      this.sortBy = Optional.ofNullable(sortBy);
      return this;
    }

    public GetDigitalItemsRequest build() {
      return new GetDigitalItemsRequest(page, size, sortBy, additionalProperties);
    }
  }
}
