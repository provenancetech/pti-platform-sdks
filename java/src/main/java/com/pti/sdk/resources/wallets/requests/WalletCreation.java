/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.wallets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import com.pti.sdk.types.BlockChainEnum;
import com.pti.sdk.types.CurrencyEnum;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WalletCreation.Builder.class
)
public final class WalletCreation {
  private final String walletId;

  private final CurrencyEnum currency;

  private final Optional<BlockChainEnum> network;

  private final Optional<String> createDateTime;

  private final Map<String, Object> additionalProperties;

  private WalletCreation(String walletId, CurrencyEnum currency, Optional<BlockChainEnum> network,
      Optional<String> createDateTime, Map<String, Object> additionalProperties) {
    this.walletId = walletId;
    this.currency = currency;
    this.network = network;
    this.createDateTime = createDateTime;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("walletId")
  public String getWalletId() {
    return walletId;
  }

  @JsonProperty("currency")
  public CurrencyEnum getCurrency() {
    return currency;
  }

  @JsonProperty("network")
  public Optional<BlockChainEnum> getNetwork() {
    return network;
  }

  @JsonProperty("type")
  public String getType() {
    return "WALLET";
  }

  @JsonProperty("createDateTime")
  public Optional<String> getCreateDateTime() {
    return createDateTime;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WalletCreation && equalTo((WalletCreation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WalletCreation other) {
    return walletId.equals(other.walletId) && currency.equals(other.currency) && network.equals(other.network) && createDateTime.equals(other.createDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.walletId, this.currency, this.network, this.createDateTime);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static WalletIdStage builder() {
    return new Builder();
  }

  public interface WalletIdStage {
    CurrencyStage walletId(@NotNull String walletId);

    Builder from(WalletCreation other);
  }

  public interface CurrencyStage {
    _FinalStage currency(@NotNull CurrencyEnum currency);
  }

  public interface _FinalStage {
    WalletCreation build();

    _FinalStage network(Optional<BlockChainEnum> network);

    _FinalStage network(BlockChainEnum network);

    _FinalStage createDateTime(Optional<String> createDateTime);

    _FinalStage createDateTime(String createDateTime);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements WalletIdStage, CurrencyStage, _FinalStage {
    private String walletId;

    private CurrencyEnum currency;

    private Optional<String> createDateTime = Optional.empty();

    private Optional<BlockChainEnum> network = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(WalletCreation other) {
      walletId(other.getWalletId());
      currency(other.getCurrency());
      network(other.getNetwork());
      createDateTime(other.getCreateDateTime());
      return this;
    }

    @Override
    @JsonSetter("walletId")
    public CurrencyStage walletId(@NotNull String walletId) {
      this.walletId = Objects.requireNonNull(walletId, "walletId must not be null");
      return this;
    }

    @Override
    @JsonSetter("currency")
    public _FinalStage currency(@NotNull CurrencyEnum currency) {
      this.currency = Objects.requireNonNull(currency, "currency must not be null");
      return this;
    }

    @Override
    public _FinalStage createDateTime(String createDateTime) {
      this.createDateTime = Optional.ofNullable(createDateTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "createDateTime",
        nulls = Nulls.SKIP
    )
    public _FinalStage createDateTime(Optional<String> createDateTime) {
      this.createDateTime = createDateTime;
      return this;
    }

    @Override
    public _FinalStage network(BlockChainEnum network) {
      this.network = Optional.ofNullable(network);
      return this;
    }

    @Override
    @JsonSetter(
        value = "network",
        nulls = Nulls.SKIP
    )
    public _FinalStage network(Optional<BlockChainEnum> network) {
      this.network = network;
      return this;
    }

    @Override
    public WalletCreation build() {
      return new WalletCreation(walletId, currency, network, createDateTime, additionalProperties);
    }
  }
}
