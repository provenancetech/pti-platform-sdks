/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.resources.wallets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import com.pti.sdk.types.BlockChainEnum;
import com.pti.sdk.types.CurrencyEnum;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WalletCreation.Builder.class
)
public final class WalletCreation {
  private final Optional<String> id;

  private final CurrencyEnum currency;

  private final Optional<BlockChainEnum> network;

  private final Optional<String> label;

  private final Optional<Boolean> multiWalletAddress;

  private final Optional<String> createDateTime;

  private final Map<String, Object> additionalProperties;

  private WalletCreation(Optional<String> id, CurrencyEnum currency,
      Optional<BlockChainEnum> network, Optional<String> label,
      Optional<Boolean> multiWalletAddress, Optional<String> createDateTime,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.currency = currency;
    this.network = network;
    this.label = label;
    this.multiWalletAddress = multiWalletAddress;
    this.createDateTime = createDateTime;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  @JsonProperty("currency")
  public CurrencyEnum getCurrency() {
    return currency;
  }

  @JsonProperty("network")
  public Optional<BlockChainEnum> getNetwork() {
    return network;
  }

  /**
   * @return Optional readable label
   */
  @JsonProperty("label")
  public Optional<String> getLabel() {
    return label;
  }

  @JsonProperty("multiWalletAddress")
  public Optional<Boolean> getMultiWalletAddress() {
    return multiWalletAddress;
  }

  @JsonProperty("type")
  public String getType() {
    return "WALLET";
  }

  @JsonProperty("createDateTime")
  public Optional<String> getCreateDateTime() {
    return createDateTime;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WalletCreation && equalTo((WalletCreation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WalletCreation other) {
    return id.equals(other.id) && currency.equals(other.currency) && network.equals(other.network) && label.equals(other.label) && multiWalletAddress.equals(other.multiWalletAddress) && createDateTime.equals(other.createDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.currency, this.network, this.label, this.multiWalletAddress, this.createDateTime);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static CurrencyStage builder() {
    return new Builder();
  }

  public interface CurrencyStage {
    _FinalStage currency(@NotNull CurrencyEnum currency);

    Builder from(WalletCreation other);
  }

  public interface _FinalStage {
    WalletCreation build();

    _FinalStage id(Optional<String> id);

    _FinalStage id(String id);

    _FinalStage network(Optional<BlockChainEnum> network);

    _FinalStage network(BlockChainEnum network);

    _FinalStage label(Optional<String> label);

    _FinalStage label(String label);

    _FinalStage multiWalletAddress(Optional<Boolean> multiWalletAddress);

    _FinalStage multiWalletAddress(Boolean multiWalletAddress);

    _FinalStage createDateTime(Optional<String> createDateTime);

    _FinalStage createDateTime(String createDateTime);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements CurrencyStage, _FinalStage {
    private CurrencyEnum currency;

    private Optional<String> createDateTime = Optional.empty();

    private Optional<Boolean> multiWalletAddress = Optional.empty();

    private Optional<String> label = Optional.empty();

    private Optional<BlockChainEnum> network = Optional.empty();

    private Optional<String> id = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(WalletCreation other) {
      id(other.getId());
      currency(other.getCurrency());
      network(other.getNetwork());
      label(other.getLabel());
      multiWalletAddress(other.getMultiWalletAddress());
      createDateTime(other.getCreateDateTime());
      return this;
    }

    @Override
    @JsonSetter("currency")
    public _FinalStage currency(@NotNull CurrencyEnum currency) {
      this.currency = Objects.requireNonNull(currency, "currency must not be null");
      return this;
    }

    @Override
    public _FinalStage createDateTime(String createDateTime) {
      this.createDateTime = Optional.ofNullable(createDateTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "createDateTime",
        nulls = Nulls.SKIP
    )
    public _FinalStage createDateTime(Optional<String> createDateTime) {
      this.createDateTime = createDateTime;
      return this;
    }

    @Override
    public _FinalStage multiWalletAddress(Boolean multiWalletAddress) {
      this.multiWalletAddress = Optional.ofNullable(multiWalletAddress);
      return this;
    }

    @Override
    @JsonSetter(
        value = "multiWalletAddress",
        nulls = Nulls.SKIP
    )
    public _FinalStage multiWalletAddress(Optional<Boolean> multiWalletAddress) {
      this.multiWalletAddress = multiWalletAddress;
      return this;
    }

    /**
     * <p>Optional readable label</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage label(String label) {
      this.label = Optional.ofNullable(label);
      return this;
    }

    @Override
    @JsonSetter(
        value = "label",
        nulls = Nulls.SKIP
    )
    public _FinalStage label(Optional<String> label) {
      this.label = label;
      return this;
    }

    @Override
    public _FinalStage network(BlockChainEnum network) {
      this.network = Optional.ofNullable(network);
      return this;
    }

    @Override
    @JsonSetter(
        value = "network",
        nulls = Nulls.SKIP
    )
    public _FinalStage network(Optional<BlockChainEnum> network) {
      this.network = network;
      return this;
    }

    @Override
    public _FinalStage id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @Override
    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public _FinalStage id(Optional<String> id) {
      this.id = id;
      return this;
    }

    @Override
    public WalletCreation build() {
      return new WalletCreation(id, currency, network, label, multiWalletAddress, createDateTime, additionalProperties);
    }
  }
}
