/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Total.Builder.class
)
public final class Total {
  private final Optional<Cost> fee;

  private final Optional<Cost> total;

  private final Optional<Cost> subtotal;

  private final Map<String, Object> additionalProperties;

  private Total(Optional<Cost> fee, Optional<Cost> total, Optional<Cost> subtotal,
      Map<String, Object> additionalProperties) {
    this.fee = fee;
    this.total = total;
    this.subtotal = subtotal;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("fee")
  public Optional<Cost> getFee() {
    return fee;
  }

  @JsonProperty("total")
  public Optional<Cost> getTotal() {
    return total;
  }

  @JsonProperty("subtotal")
  public Optional<Cost> getSubtotal() {
    return subtotal;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Total && equalTo((Total) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Total other) {
    return fee.equals(other.fee) && total.equals(other.total) && subtotal.equals(other.subtotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.fee, this.total, this.subtotal);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Cost> fee = Optional.empty();

    private Optional<Cost> total = Optional.empty();

    private Optional<Cost> subtotal = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Total other) {
      fee(other.getFee());
      total(other.getTotal());
      subtotal(other.getSubtotal());
      return this;
    }

    @JsonSetter(
        value = "fee",
        nulls = Nulls.SKIP
    )
    public Builder fee(Optional<Cost> fee) {
      this.fee = fee;
      return this;
    }

    public Builder fee(Cost fee) {
      this.fee = Optional.ofNullable(fee);
      return this;
    }

    @JsonSetter(
        value = "total",
        nulls = Nulls.SKIP
    )
    public Builder total(Optional<Cost> total) {
      this.total = total;
      return this;
    }

    public Builder total(Cost total) {
      this.total = Optional.ofNullable(total);
      return this;
    }

    @JsonSetter(
        value = "subtotal",
        nulls = Nulls.SKIP
    )
    public Builder subtotal(Optional<Cost> subtotal) {
      this.subtotal = subtotal;
      return this;
    }

    public Builder subtotal(Cost subtotal) {
      this.subtotal = Optional.ofNullable(subtotal);
      return this;
    }

    public Total build() {
      return new Total(fee, total, subtotal, additionalProperties);
    }
  }
}
