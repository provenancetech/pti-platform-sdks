/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TransactionQuoteStatusObject.Builder.class
)
public final class TransactionQuoteStatusObject implements IActionStatus {
  private final Optional<ResourceType> resourceType;

  private final Optional<String> requestId;

  private final Optional<String> clientId;

  private final Optional<String> userId;

  private final Optional<String> date;

  private final Optional<Total> transactionTotal;

  private final Map<String, Object> additionalProperties;

  private TransactionQuoteStatusObject(Optional<ResourceType> resourceType,
      Optional<String> requestId, Optional<String> clientId, Optional<String> userId,
      Optional<String> date, Optional<Total> transactionTotal,
      Map<String, Object> additionalProperties) {
    this.resourceType = resourceType;
    this.requestId = requestId;
    this.clientId = clientId;
    this.userId = userId;
    this.date = date;
    this.transactionTotal = transactionTotal;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("resourceType")
  @Override
  public Optional<ResourceType> getResourceType() {
    return resourceType;
  }

  @JsonProperty("requestId")
  @Override
  public Optional<String> getRequestId() {
    return requestId;
  }

  @JsonProperty("clientId")
  @Override
  public Optional<String> getClientId() {
    return clientId;
  }

  @JsonProperty("userId")
  @Override
  public Optional<String> getUserId() {
    return userId;
  }

  /**
   * @return ISO-8601
   */
  @JsonProperty("date")
  @Override
  public Optional<String> getDate() {
    return date;
  }

  @JsonProperty("transactionTotal")
  public Optional<Total> getTransactionTotal() {
    return transactionTotal;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TransactionQuoteStatusObject && equalTo((TransactionQuoteStatusObject) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(TransactionQuoteStatusObject other) {
    return resourceType.equals(other.resourceType) && requestId.equals(other.requestId) && clientId.equals(other.clientId) && userId.equals(other.userId) && date.equals(other.date) && transactionTotal.equals(other.transactionTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.resourceType, this.requestId, this.clientId, this.userId, this.date, this.transactionTotal);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ResourceType> resourceType = Optional.empty();

    private Optional<String> requestId = Optional.empty();

    private Optional<String> clientId = Optional.empty();

    private Optional<String> userId = Optional.empty();

    private Optional<String> date = Optional.empty();

    private Optional<Total> transactionTotal = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(TransactionQuoteStatusObject other) {
      resourceType(other.getResourceType());
      requestId(other.getRequestId());
      clientId(other.getClientId());
      userId(other.getUserId());
      date(other.getDate());
      transactionTotal(other.getTransactionTotal());
      return this;
    }

    @JsonSetter(
        value = "resourceType",
        nulls = Nulls.SKIP
    )
    public Builder resourceType(Optional<ResourceType> resourceType) {
      this.resourceType = resourceType;
      return this;
    }

    public Builder resourceType(ResourceType resourceType) {
      this.resourceType = Optional.ofNullable(resourceType);
      return this;
    }

    @JsonSetter(
        value = "requestId",
        nulls = Nulls.SKIP
    )
    public Builder requestId(Optional<String> requestId) {
      this.requestId = requestId;
      return this;
    }

    public Builder requestId(String requestId) {
      this.requestId = Optional.ofNullable(requestId);
      return this;
    }

    @JsonSetter(
        value = "clientId",
        nulls = Nulls.SKIP
    )
    public Builder clientId(Optional<String> clientId) {
      this.clientId = clientId;
      return this;
    }

    public Builder clientId(String clientId) {
      this.clientId = Optional.ofNullable(clientId);
      return this;
    }

    @JsonSetter(
        value = "userId",
        nulls = Nulls.SKIP
    )
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.ofNullable(userId);
      return this;
    }

    @JsonSetter(
        value = "date",
        nulls = Nulls.SKIP
    )
    public Builder date(Optional<String> date) {
      this.date = date;
      return this;
    }

    public Builder date(String date) {
      this.date = Optional.ofNullable(date);
      return this;
    }

    @JsonSetter(
        value = "transactionTotal",
        nulls = Nulls.SKIP
    )
    public Builder transactionTotal(Optional<Total> transactionTotal) {
      this.transactionTotal = transactionTotal;
      return this;
    }

    public Builder transactionTotal(Total transactionTotal) {
      this.transactionTotal = Optional.ofNullable(transactionTotal);
      return this;
    }

    public TransactionQuoteStatusObject build() {
      return new TransactionQuoteStatusObject(resourceType, requestId, clientId, userId, date, transactionTotal, additionalProperties);
    }
  }
}
