/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class OneOfUserSubTypes {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private OneOfUserSubTypes(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static OneOfUserSubTypes person(Person value) {
    return new OneOfUserSubTypes(new PersonValue(value));
  }

  public static OneOfUserSubTypes business(Business value) {
    return new OneOfUserSubTypes(new BusinessValue(value));
  }

  public boolean isPerson() {
    return value instanceof PersonValue;
  }

  public boolean isBusiness() {
    return value instanceof BusinessValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<Person> getPerson() {
    if (isPerson()) {
      return Optional.of(((PersonValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Business> getBusiness() {
    if (isBusiness()) {
      return Optional.of(((BusinessValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitPerson(Person person);

    T visitBusiness(Business business);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(PersonValue.class),
      @JsonSubTypes.Type(BusinessValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("PERSON")
  private static final class PersonValue implements Value {
    @JsonUnwrapped
    private Person value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PersonValue() {
    }

    private PersonValue(Person value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPerson(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PersonValue && equalTo((PersonValue) other);
    }

    private boolean equalTo(PersonValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "OneOfUserSubTypes{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("BUSINESS")
  private static final class BusinessValue implements Value {
    @JsonUnwrapped
    private Business value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private BusinessValue() {
    }

    private BusinessValue(Business value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitBusiness(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof BusinessValue && equalTo((BusinessValue) other);
    }

    private boolean equalTo(BusinessValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "OneOfUserSubTypes{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @java.lang.Override
    public String toString() {
      return "OneOfUserSubTypes{" + "type: " + type + ", value: " + value + "}";
    }
  }
}
