/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.pti.sdk.core.ObjectMappers;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.lang.IllegalStateException;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    using = OneOfTransactionSubTypes.Deserializer.class
)
public final class OneOfTransactionSubTypes {
  private final Object value;

  private final int type;

  private OneOfTransactionSubTypes(Object value, int type) {
    this.value = value;
    this.type = type;
  }

  @JsonValue
  public Object get() {
    return this.value;
  }

  public <T> T visit(Visitor<T> visitor) {
    if(this.type == 0) {
      return visitor.visit((DepositTransaction) this.value);
    } else if(this.type == 1) {
      return visitor.visit((WithdrawalTransaction) this.value);
    } else if(this.type == 2) {
      return visitor.visit((TransferTransaction) this.value);
    } else if(this.type == 3) {
      return visitor.visit((SellTransaction) this.value);
    } else if(this.type == 4) {
      return visitor.visit((BuyTransaction) this.value);
    } else if(this.type == 5) {
      return visitor.visit((MintTransaction) this.value);
    } else if(this.type == 6) {
      return visitor.visit((TradeTransaction) this.value);
    } else if(this.type == 7) {
      return visitor.visit((PaymentTransaction) this.value);
    }
    throw new IllegalStateException("Failed to visit value. This should never happen.");
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof OneOfTransactionSubTypes && equalTo((OneOfTransactionSubTypes) other);
  }

  private boolean equalTo(OneOfTransactionSubTypes other) {
    return value.equals(other.value);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.value);
  }

  @java.lang.Override
  public String toString() {
    return this.value.toString();
  }

  public static OneOfTransactionSubTypes of(DepositTransaction value) {
    return new OneOfTransactionSubTypes(value, 0);
  }

  public static OneOfTransactionSubTypes of(WithdrawalTransaction value) {
    return new OneOfTransactionSubTypes(value, 1);
  }

  public static OneOfTransactionSubTypes of(TransferTransaction value) {
    return new OneOfTransactionSubTypes(value, 2);
  }

  public static OneOfTransactionSubTypes of(SellTransaction value) {
    return new OneOfTransactionSubTypes(value, 3);
  }

  public static OneOfTransactionSubTypes of(BuyTransaction value) {
    return new OneOfTransactionSubTypes(value, 4);
  }

  public static OneOfTransactionSubTypes of(MintTransaction value) {
    return new OneOfTransactionSubTypes(value, 5);
  }

  public static OneOfTransactionSubTypes of(TradeTransaction value) {
    return new OneOfTransactionSubTypes(value, 6);
  }

  public static OneOfTransactionSubTypes of(PaymentTransaction value) {
    return new OneOfTransactionSubTypes(value, 7);
  }

  public interface Visitor<T> {
    T visit(DepositTransaction value);

    T visit(WithdrawalTransaction value);

    T visit(TransferTransaction value);

    T visit(SellTransaction value);

    T visit(BuyTransaction value);

    T visit(MintTransaction value);

    T visit(TradeTransaction value);

    T visit(PaymentTransaction value);
  }

  static final class Deserializer extends StdDeserializer<OneOfTransactionSubTypes> {
    Deserializer() {
      super(OneOfTransactionSubTypes.class);
    }

    @java.lang.Override
    public OneOfTransactionSubTypes deserialize(JsonParser p, DeserializationContext context) throws
        IOException {
      Object value = p.readValueAs(Object.class);
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, DepositTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, WithdrawalTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, TransferTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, SellTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, BuyTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, MintTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, TradeTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, PaymentTransaction.class));
      } catch(IllegalArgumentException e) {
      }
      throw new JsonParseException(p, "Failed to deserialize");
    }
  }
}
