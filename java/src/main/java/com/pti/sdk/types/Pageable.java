/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Pageable.Builder.class
)
public final class Pageable {
  private final Optional<Integer> pageNumber;

  private final Optional<Integer> pageSize;

  private final Optional<Integer> offset;

  private final Optional<Boolean> paged;

  private final Optional<Boolean> unpaged;

  private final Map<String, Object> additionalProperties;

  private Pageable(Optional<Integer> pageNumber, Optional<Integer> pageSize,
      Optional<Integer> offset, Optional<Boolean> paged, Optional<Boolean> unpaged,
      Map<String, Object> additionalProperties) {
    this.pageNumber = pageNumber;
    this.pageSize = pageSize;
    this.offset = offset;
    this.paged = paged;
    this.unpaged = unpaged;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("pageNumber")
  public Optional<Integer> getPageNumber() {
    return pageNumber;
  }

  @JsonProperty("pageSize")
  public Optional<Integer> getPageSize() {
    return pageSize;
  }

  @JsonProperty("offset")
  public Optional<Integer> getOffset() {
    return offset;
  }

  @JsonProperty("paged")
  public Optional<Boolean> getPaged() {
    return paged;
  }

  @JsonProperty("unpaged")
  public Optional<Boolean> getUnpaged() {
    return unpaged;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Pageable && equalTo((Pageable) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Pageable other) {
    return pageNumber.equals(other.pageNumber) && pageSize.equals(other.pageSize) && offset.equals(other.offset) && paged.equals(other.paged) && unpaged.equals(other.unpaged);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.pageNumber, this.pageSize, this.offset, this.paged, this.unpaged);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> pageNumber = Optional.empty();

    private Optional<Integer> pageSize = Optional.empty();

    private Optional<Integer> offset = Optional.empty();

    private Optional<Boolean> paged = Optional.empty();

    private Optional<Boolean> unpaged = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Pageable other) {
      pageNumber(other.getPageNumber());
      pageSize(other.getPageSize());
      offset(other.getOffset());
      paged(other.getPaged());
      unpaged(other.getUnpaged());
      return this;
    }

    @JsonSetter(
        value = "pageNumber",
        nulls = Nulls.SKIP
    )
    public Builder pageNumber(Optional<Integer> pageNumber) {
      this.pageNumber = pageNumber;
      return this;
    }

    public Builder pageNumber(Integer pageNumber) {
      this.pageNumber = Optional.ofNullable(pageNumber);
      return this;
    }

    @JsonSetter(
        value = "pageSize",
        nulls = Nulls.SKIP
    )
    public Builder pageSize(Optional<Integer> pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public Builder pageSize(Integer pageSize) {
      this.pageSize = Optional.ofNullable(pageSize);
      return this;
    }

    @JsonSetter(
        value = "offset",
        nulls = Nulls.SKIP
    )
    public Builder offset(Optional<Integer> offset) {
      this.offset = offset;
      return this;
    }

    public Builder offset(Integer offset) {
      this.offset = Optional.ofNullable(offset);
      return this;
    }

    @JsonSetter(
        value = "paged",
        nulls = Nulls.SKIP
    )
    public Builder paged(Optional<Boolean> paged) {
      this.paged = paged;
      return this;
    }

    public Builder paged(Boolean paged) {
      this.paged = Optional.ofNullable(paged);
      return this;
    }

    @JsonSetter(
        value = "unpaged",
        nulls = Nulls.SKIP
    )
    public Builder unpaged(Optional<Boolean> unpaged) {
      this.unpaged = unpaged;
      return this;
    }

    public Builder unpaged(Boolean unpaged) {
      this.unpaged = Optional.ofNullable(unpaged);
      return this;
    }

    public Pageable build() {
      return new Pageable(pageNumber, pageSize, offset, paged, unpaged, additionalProperties);
    }
  }
}
