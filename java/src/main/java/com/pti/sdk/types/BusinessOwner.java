/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BusinessOwner.Builder.class
)
public final class BusinessOwner {
  private final int ownershipPercent;

  private final Person person;

  private final Map<String, Object> additionalProperties;

  private BusinessOwner(int ownershipPercent, Person person,
      Map<String, Object> additionalProperties) {
    this.ownershipPercent = ownershipPercent;
    this.person = person;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("ownershipPercent")
  public int getOwnershipPercent() {
    return ownershipPercent;
  }

  @JsonProperty("person")
  public Person getPerson() {
    return person;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BusinessOwner && equalTo((BusinessOwner) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(BusinessOwner other) {
    return ownershipPercent == other.ownershipPercent && person.equals(other.person);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.ownershipPercent, this.person);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static OwnershipPercentStage builder() {
    return new Builder();
  }

  public interface OwnershipPercentStage {
    PersonStage ownershipPercent(int ownershipPercent);

    Builder from(BusinessOwner other);
  }

  public interface PersonStage {
    _FinalStage person(@NotNull Person person);
  }

  public interface _FinalStage {
    BusinessOwner build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements OwnershipPercentStage, PersonStage, _FinalStage {
    private int ownershipPercent;

    private Person person;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(BusinessOwner other) {
      ownershipPercent(other.getOwnershipPercent());
      person(other.getPerson());
      return this;
    }

    @Override
    @JsonSetter("ownershipPercent")
    public PersonStage ownershipPercent(int ownershipPercent) {
      this.ownershipPercent = ownershipPercent;
      return this;
    }

    @Override
    @JsonSetter("person")
    public _FinalStage person(@NotNull Person person) {
      this.person = Objects.requireNonNull(person, "person must not be null");
      return this;
    }

    @Override
    public BusinessOwner build() {
      return new BusinessOwner(ownershipPercent, person, additionalProperties);
    }
  }
}
