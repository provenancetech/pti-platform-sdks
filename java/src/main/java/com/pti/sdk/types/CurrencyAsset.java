/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CurrencyAsset.Builder.class
)
public final class CurrencyAsset {
  private final Optional<CurrencyType> type;

  private final Optional<CurrencyEnum> currency;

  private final Optional<List<BlockChainEnum>> networks;

  private final Map<String, Object> additionalProperties;

  private CurrencyAsset(Optional<CurrencyType> type, Optional<CurrencyEnum> currency,
      Optional<List<BlockChainEnum>> networks, Map<String, Object> additionalProperties) {
    this.type = type;
    this.currency = currency;
    this.networks = networks;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("type")
  public Optional<CurrencyType> getType() {
    return type;
  }

  @JsonProperty("currency")
  public Optional<CurrencyEnum> getCurrency() {
    return currency;
  }

  @JsonProperty("networks")
  public Optional<List<BlockChainEnum>> getNetworks() {
    return networks;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CurrencyAsset && equalTo((CurrencyAsset) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(CurrencyAsset other) {
    return type.equals(other.type) && currency.equals(other.currency) && networks.equals(other.networks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.type, this.currency, this.networks);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<CurrencyType> type = Optional.empty();

    private Optional<CurrencyEnum> currency = Optional.empty();

    private Optional<List<BlockChainEnum>> networks = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(CurrencyAsset other) {
      type(other.getType());
      currency(other.getCurrency());
      networks(other.getNetworks());
      return this;
    }

    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public Builder type(Optional<CurrencyType> type) {
      this.type = type;
      return this;
    }

    public Builder type(CurrencyType type) {
      this.type = Optional.ofNullable(type);
      return this;
    }

    @JsonSetter(
        value = "currency",
        nulls = Nulls.SKIP
    )
    public Builder currency(Optional<CurrencyEnum> currency) {
      this.currency = currency;
      return this;
    }

    public Builder currency(CurrencyEnum currency) {
      this.currency = Optional.ofNullable(currency);
      return this;
    }

    @JsonSetter(
        value = "networks",
        nulls = Nulls.SKIP
    )
    public Builder networks(Optional<List<BlockChainEnum>> networks) {
      this.networks = networks;
      return this;
    }

    public Builder networks(List<BlockChainEnum> networks) {
      this.networks = Optional.ofNullable(networks);
      return this;
    }

    public CurrencyAsset build() {
      return new CurrencyAsset(type, currency, networks, additionalProperties);
    }
  }
}
