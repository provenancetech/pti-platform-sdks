/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WalletHistory.Builder.class
)
public final class WalletHistory {
  private final String walletId;

  private final Optional<Double> balanceBefore;

  private final Optional<Double> inFlightBalanceBefore;

  private final Optional<String> createDateTime;

  private final Optional<Double> change;

  private final Optional<WalletHistoryOperationTarget> operationTarget;

  private final Optional<String> requestId;

  private final Map<String, Object> additionalProperties;

  private WalletHistory(String walletId, Optional<Double> balanceBefore,
      Optional<Double> inFlightBalanceBefore, Optional<String> createDateTime,
      Optional<Double> change, Optional<WalletHistoryOperationTarget> operationTarget,
      Optional<String> requestId, Map<String, Object> additionalProperties) {
    this.walletId = walletId;
    this.balanceBefore = balanceBefore;
    this.inFlightBalanceBefore = inFlightBalanceBefore;
    this.createDateTime = createDateTime;
    this.change = change;
    this.operationTarget = operationTarget;
    this.requestId = requestId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("walletId")
  public String getWalletId() {
    return walletId;
  }

  @JsonProperty("balanceBefore")
  public Optional<Double> getBalanceBefore() {
    return balanceBefore;
  }

  @JsonProperty("inFlightBalanceBefore")
  public Optional<Double> getInFlightBalanceBefore() {
    return inFlightBalanceBefore;
  }

  @JsonProperty("createDateTime")
  public Optional<String> getCreateDateTime() {
    return createDateTime;
  }

  @JsonProperty("change")
  public Optional<Double> getChange() {
    return change;
  }

  @JsonProperty("operationTarget")
  public Optional<WalletHistoryOperationTarget> getOperationTarget() {
    return operationTarget;
  }

  @JsonProperty("requestId")
  public Optional<String> getRequestId() {
    return requestId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WalletHistory && equalTo((WalletHistory) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WalletHistory other) {
    return walletId.equals(other.walletId) && balanceBefore.equals(other.balanceBefore) && inFlightBalanceBefore.equals(other.inFlightBalanceBefore) && createDateTime.equals(other.createDateTime) && change.equals(other.change) && operationTarget.equals(other.operationTarget) && requestId.equals(other.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.walletId, this.balanceBefore, this.inFlightBalanceBefore, this.createDateTime, this.change, this.operationTarget, this.requestId);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static WalletIdStage builder() {
    return new Builder();
  }

  public interface WalletIdStage {
    _FinalStage walletId(@NotNull String walletId);

    Builder from(WalletHistory other);
  }

  public interface _FinalStage {
    WalletHistory build();

    _FinalStage balanceBefore(Optional<Double> balanceBefore);

    _FinalStage balanceBefore(Double balanceBefore);

    _FinalStage inFlightBalanceBefore(Optional<Double> inFlightBalanceBefore);

    _FinalStage inFlightBalanceBefore(Double inFlightBalanceBefore);

    _FinalStage createDateTime(Optional<String> createDateTime);

    _FinalStage createDateTime(String createDateTime);

    _FinalStage change(Optional<Double> change);

    _FinalStage change(Double change);

    _FinalStage operationTarget(Optional<WalletHistoryOperationTarget> operationTarget);

    _FinalStage operationTarget(WalletHistoryOperationTarget operationTarget);

    _FinalStage requestId(Optional<String> requestId);

    _FinalStage requestId(String requestId);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements WalletIdStage, _FinalStage {
    private String walletId;

    private Optional<String> requestId = Optional.empty();

    private Optional<WalletHistoryOperationTarget> operationTarget = Optional.empty();

    private Optional<Double> change = Optional.empty();

    private Optional<String> createDateTime = Optional.empty();

    private Optional<Double> inFlightBalanceBefore = Optional.empty();

    private Optional<Double> balanceBefore = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(WalletHistory other) {
      walletId(other.getWalletId());
      balanceBefore(other.getBalanceBefore());
      inFlightBalanceBefore(other.getInFlightBalanceBefore());
      createDateTime(other.getCreateDateTime());
      change(other.getChange());
      operationTarget(other.getOperationTarget());
      requestId(other.getRequestId());
      return this;
    }

    @Override
    @JsonSetter("walletId")
    public _FinalStage walletId(@NotNull String walletId) {
      this.walletId = Objects.requireNonNull(walletId, "walletId must not be null");
      return this;
    }

    @Override
    public _FinalStage requestId(String requestId) {
      this.requestId = Optional.ofNullable(requestId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "requestId",
        nulls = Nulls.SKIP
    )
    public _FinalStage requestId(Optional<String> requestId) {
      this.requestId = requestId;
      return this;
    }

    @Override
    public _FinalStage operationTarget(WalletHistoryOperationTarget operationTarget) {
      this.operationTarget = Optional.ofNullable(operationTarget);
      return this;
    }

    @Override
    @JsonSetter(
        value = "operationTarget",
        nulls = Nulls.SKIP
    )
    public _FinalStage operationTarget(Optional<WalletHistoryOperationTarget> operationTarget) {
      this.operationTarget = operationTarget;
      return this;
    }

    @Override
    public _FinalStage change(Double change) {
      this.change = Optional.ofNullable(change);
      return this;
    }

    @Override
    @JsonSetter(
        value = "change",
        nulls = Nulls.SKIP
    )
    public _FinalStage change(Optional<Double> change) {
      this.change = change;
      return this;
    }

    @Override
    public _FinalStage createDateTime(String createDateTime) {
      this.createDateTime = Optional.ofNullable(createDateTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "createDateTime",
        nulls = Nulls.SKIP
    )
    public _FinalStage createDateTime(Optional<String> createDateTime) {
      this.createDateTime = createDateTime;
      return this;
    }

    @Override
    public _FinalStage inFlightBalanceBefore(Double inFlightBalanceBefore) {
      this.inFlightBalanceBefore = Optional.ofNullable(inFlightBalanceBefore);
      return this;
    }

    @Override
    @JsonSetter(
        value = "inFlightBalanceBefore",
        nulls = Nulls.SKIP
    )
    public _FinalStage inFlightBalanceBefore(Optional<Double> inFlightBalanceBefore) {
      this.inFlightBalanceBefore = inFlightBalanceBefore;
      return this;
    }

    @Override
    public _FinalStage balanceBefore(Double balanceBefore) {
      this.balanceBefore = Optional.ofNullable(balanceBefore);
      return this;
    }

    @Override
    @JsonSetter(
        value = "balanceBefore",
        nulls = Nulls.SKIP
    )
    public _FinalStage balanceBefore(Optional<Double> balanceBefore) {
      this.balanceBefore = balanceBefore;
      return this;
    }

    @Override
    public WalletHistory build() {
      return new WalletHistory(walletId, balanceBefore, inFlightBalanceBefore, createDateTime, change, operationTarget, requestId, additionalProperties);
    }
  }
}
