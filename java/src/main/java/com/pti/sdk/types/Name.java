/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Name.Builder.class
)
public final class Name {
  private final Optional<String> firstName;

  private final Optional<String> lastName;

  private final Optional<String> middleName;

  private final Map<String, Object> additionalProperties;

  private Name(Optional<String> firstName, Optional<String> lastName, Optional<String> middleName,
      Map<String, Object> additionalProperties) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.middleName = middleName;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("firstName")
  public Optional<String> getFirstName() {
    return firstName;
  }

  @JsonProperty("lastName")
  public Optional<String> getLastName() {
    return lastName;
  }

  @JsonProperty("middleName")
  public Optional<String> getMiddleName() {
    return middleName;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Name && equalTo((Name) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Name other) {
    return firstName.equals(other.firstName) && lastName.equals(other.lastName) && middleName.equals(other.middleName);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.firstName, this.lastName, this.middleName);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> firstName = Optional.empty();

    private Optional<String> lastName = Optional.empty();

    private Optional<String> middleName = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Name other) {
      firstName(other.getFirstName());
      lastName(other.getLastName());
      middleName(other.getMiddleName());
      return this;
    }

    @JsonSetter(
        value = "firstName",
        nulls = Nulls.SKIP
    )
    public Builder firstName(Optional<String> firstName) {
      this.firstName = firstName;
      return this;
    }

    public Builder firstName(String firstName) {
      this.firstName = Optional.ofNullable(firstName);
      return this;
    }

    @JsonSetter(
        value = "lastName",
        nulls = Nulls.SKIP
    )
    public Builder lastName(Optional<String> lastName) {
      this.lastName = lastName;
      return this;
    }

    public Builder lastName(String lastName) {
      this.lastName = Optional.ofNullable(lastName);
      return this;
    }

    @JsonSetter(
        value = "middleName",
        nulls = Nulls.SKIP
    )
    public Builder middleName(Optional<String> middleName) {
      this.middleName = middleName;
      return this;
    }

    public Builder middleName(String middleName) {
      this.middleName = Optional.ofNullable(middleName);
      return this;
    }

    public Name build() {
      return new Name(firstName, lastName, middleName, additionalProperties);
    }
  }
}
