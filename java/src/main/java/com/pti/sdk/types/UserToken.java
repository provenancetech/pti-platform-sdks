/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserToken.Builder.class
)
public final class UserToken {
  private final String accessToken;

  private final double expiresAt;

  private final String tokenType;

  private final Map<String, Object> additionalProperties;

  private UserToken(String accessToken, double expiresAt, String tokenType,
      Map<String, Object> additionalProperties) {
    this.accessToken = accessToken;
    this.expiresAt = expiresAt;
    this.tokenType = tokenType;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("accessToken")
  public String getAccessToken() {
    return accessToken;
  }

  @JsonProperty("expiresAt")
  public double getExpiresAt() {
    return expiresAt;
  }

  @JsonProperty("tokenType")
  public String getTokenType() {
    return tokenType;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserToken && equalTo((UserToken) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UserToken other) {
    return accessToken.equals(other.accessToken) && expiresAt == other.expiresAt && tokenType.equals(other.tokenType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.accessToken, this.expiresAt, this.tokenType);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static AccessTokenStage builder() {
    return new Builder();
  }

  public interface AccessTokenStage {
    ExpiresAtStage accessToken(@NotNull String accessToken);

    Builder from(UserToken other);
  }

  public interface ExpiresAtStage {
    TokenTypeStage expiresAt(double expiresAt);
  }

  public interface TokenTypeStage {
    _FinalStage tokenType(@NotNull String tokenType);
  }

  public interface _FinalStage {
    UserToken build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AccessTokenStage, ExpiresAtStage, TokenTypeStage, _FinalStage {
    private String accessToken;

    private double expiresAt;

    private String tokenType;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(UserToken other) {
      accessToken(other.getAccessToken());
      expiresAt(other.getExpiresAt());
      tokenType(other.getTokenType());
      return this;
    }

    @Override
    @JsonSetter("accessToken")
    public ExpiresAtStage accessToken(@NotNull String accessToken) {
      this.accessToken = Objects.requireNonNull(accessToken, "accessToken must not be null");
      return this;
    }

    @Override
    @JsonSetter("expiresAt")
    public TokenTypeStage expiresAt(double expiresAt) {
      this.expiresAt = expiresAt;
      return this;
    }

    @Override
    @JsonSetter("tokenType")
    public _FinalStage tokenType(@NotNull String tokenType) {
      this.tokenType = Objects.requireNonNull(tokenType, "tokenType must not be null");
      return this;
    }

    @Override
    public UserToken build() {
      return new UserToken(accessToken, expiresAt, tokenType, additionalProperties);
    }
  }
}
