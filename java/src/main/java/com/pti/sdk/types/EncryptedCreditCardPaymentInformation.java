/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = EncryptedCreditCardPaymentInformation.Builder.class
)
public final class EncryptedCreditCardPaymentInformation implements IExternalPaymentInformation {
  private final Optional<String> id;

  private final Optional<Map<String, String>> encryptedInformation;

  private final Optional<String> creditCardLast4;

  private final Optional<String> cvv;

  private final Optional<String> creditCardType;

  private final Optional<String> creditCardFirst6;

  private final Optional<String> expirationYear;

  private final Optional<String> expirationMonth;

  private final Optional<String> creditCardBin;

  private final Optional<String> creditCardReference;

  private final Optional<String> cardHolderFirstName;

  private final Optional<String> cardHolderLastName;

  private final Optional<Address> creditCardAddress;

  private final Optional<Map<String, Object>> meta;

  private final Map<String, Object> additionalProperties;

  private EncryptedCreditCardPaymentInformation(Optional<String> id,
      Optional<Map<String, String>> encryptedInformation, Optional<String> creditCardLast4,
      Optional<String> cvv, Optional<String> creditCardType, Optional<String> creditCardFirst6,
      Optional<String> expirationYear, Optional<String> expirationMonth,
      Optional<String> creditCardBin, Optional<String> creditCardReference,
      Optional<String> cardHolderFirstName, Optional<String> cardHolderLastName,
      Optional<Address> creditCardAddress, Optional<Map<String, Object>> meta,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.encryptedInformation = encryptedInformation;
    this.creditCardLast4 = creditCardLast4;
    this.cvv = cvv;
    this.creditCardType = creditCardType;
    this.creditCardFirst6 = creditCardFirst6;
    this.expirationYear = expirationYear;
    this.expirationMonth = expirationMonth;
    this.creditCardBin = creditCardBin;
    this.creditCardReference = creditCardReference;
    this.cardHolderFirstName = cardHolderFirstName;
    this.cardHolderLastName = cardHolderLastName;
    this.creditCardAddress = creditCardAddress;
    this.meta = meta;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Unique identifier for the payment information, must be used to refer to a payment information for a payment
   */
  @JsonProperty("id")
  @Override
  public Optional<String> getId() {
    return id;
  }

  @JsonProperty("encryptedInformation")
  public Optional<Map<String, String>> getEncryptedInformation() {
    return encryptedInformation;
  }

  @JsonProperty("creditCardLast4")
  public Optional<String> getCreditCardLast4() {
    return creditCardLast4;
  }

  /**
   * @return 3 or 4 digits
   */
  @JsonProperty("cvv")
  public Optional<String> getCvv() {
    return cvv;
  }

  /**
   * @return VISA, MASTERCARD etc
   */
  @JsonProperty("creditCardType")
  public Optional<String> getCreditCardType() {
    return creditCardType;
  }

  /**
   * @return Deprecated, use bin instead
   */
  @JsonProperty("creditCardFirst6")
  public Optional<String> getCreditCardFirst6() {
    return creditCardFirst6;
  }

  /**
   * @return 4 digits
   */
  @JsonProperty("expirationYear")
  public Optional<String> getExpirationYear() {
    return expirationYear;
  }

  /**
   * @return 2 digits
   */
  @JsonProperty("expirationMonth")
  public Optional<String> getExpirationMonth() {
    return expirationMonth;
  }

  @JsonProperty("creditCardBin")
  public Optional<String> getCreditCardBin() {
    return creditCardBin;
  }

  /**
   * @return Reference to the credit card in our system, this must be set when you create a credit card
   */
  @JsonProperty("creditCardReference")
  public Optional<String> getCreditCardReference() {
    return creditCardReference;
  }

  /**
   * @return first name of card holder
   */
  @JsonProperty("cardHolderFirstName")
  public Optional<String> getCardHolderFirstName() {
    return cardHolderFirstName;
  }

  /**
   * @return last name of card holder
   */
  @JsonProperty("cardHolderLastName")
  public Optional<String> getCardHolderLastName() {
    return cardHolderLastName;
  }

  /**
   * @return card holder address
   */
  @JsonProperty("creditCardAddress")
  public Optional<Address> getCreditCardAddress() {
    return creditCardAddress;
  }

  /**
   * @return key/value map of extra meta data for this credit card
   */
  @JsonProperty("meta")
  public Optional<Map<String, Object>> getMeta() {
    return meta;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EncryptedCreditCardPaymentInformation && equalTo((EncryptedCreditCardPaymentInformation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(EncryptedCreditCardPaymentInformation other) {
    return id.equals(other.id) && encryptedInformation.equals(other.encryptedInformation) && creditCardLast4.equals(other.creditCardLast4) && cvv.equals(other.cvv) && creditCardType.equals(other.creditCardType) && creditCardFirst6.equals(other.creditCardFirst6) && expirationYear.equals(other.expirationYear) && expirationMonth.equals(other.expirationMonth) && creditCardBin.equals(other.creditCardBin) && creditCardReference.equals(other.creditCardReference) && cardHolderFirstName.equals(other.cardHolderFirstName) && cardHolderLastName.equals(other.cardHolderLastName) && creditCardAddress.equals(other.creditCardAddress) && meta.equals(other.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.encryptedInformation, this.creditCardLast4, this.cvv, this.creditCardType, this.creditCardFirst6, this.expirationYear, this.expirationMonth, this.creditCardBin, this.creditCardReference, this.cardHolderFirstName, this.cardHolderLastName, this.creditCardAddress, this.meta);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<Map<String, String>> encryptedInformation = Optional.empty();

    private Optional<String> creditCardLast4 = Optional.empty();

    private Optional<String> cvv = Optional.empty();

    private Optional<String> creditCardType = Optional.empty();

    private Optional<String> creditCardFirst6 = Optional.empty();

    private Optional<String> expirationYear = Optional.empty();

    private Optional<String> expirationMonth = Optional.empty();

    private Optional<String> creditCardBin = Optional.empty();

    private Optional<String> creditCardReference = Optional.empty();

    private Optional<String> cardHolderFirstName = Optional.empty();

    private Optional<String> cardHolderLastName = Optional.empty();

    private Optional<Address> creditCardAddress = Optional.empty();

    private Optional<Map<String, Object>> meta = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(EncryptedCreditCardPaymentInformation other) {
      id(other.getId());
      encryptedInformation(other.getEncryptedInformation());
      creditCardLast4(other.getCreditCardLast4());
      cvv(other.getCvv());
      creditCardType(other.getCreditCardType());
      creditCardFirst6(other.getCreditCardFirst6());
      expirationYear(other.getExpirationYear());
      expirationMonth(other.getExpirationMonth());
      creditCardBin(other.getCreditCardBin());
      creditCardReference(other.getCreditCardReference());
      cardHolderFirstName(other.getCardHolderFirstName());
      cardHolderLastName(other.getCardHolderLastName());
      creditCardAddress(other.getCreditCardAddress());
      meta(other.getMeta());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "encryptedInformation",
        nulls = Nulls.SKIP
    )
    public Builder encryptedInformation(Optional<Map<String, String>> encryptedInformation) {
      this.encryptedInformation = encryptedInformation;
      return this;
    }

    public Builder encryptedInformation(Map<String, String> encryptedInformation) {
      this.encryptedInformation = Optional.ofNullable(encryptedInformation);
      return this;
    }

    @JsonSetter(
        value = "creditCardLast4",
        nulls = Nulls.SKIP
    )
    public Builder creditCardLast4(Optional<String> creditCardLast4) {
      this.creditCardLast4 = creditCardLast4;
      return this;
    }

    public Builder creditCardLast4(String creditCardLast4) {
      this.creditCardLast4 = Optional.ofNullable(creditCardLast4);
      return this;
    }

    @JsonSetter(
        value = "cvv",
        nulls = Nulls.SKIP
    )
    public Builder cvv(Optional<String> cvv) {
      this.cvv = cvv;
      return this;
    }

    public Builder cvv(String cvv) {
      this.cvv = Optional.ofNullable(cvv);
      return this;
    }

    @JsonSetter(
        value = "creditCardType",
        nulls = Nulls.SKIP
    )
    public Builder creditCardType(Optional<String> creditCardType) {
      this.creditCardType = creditCardType;
      return this;
    }

    public Builder creditCardType(String creditCardType) {
      this.creditCardType = Optional.ofNullable(creditCardType);
      return this;
    }

    @JsonSetter(
        value = "creditCardFirst6",
        nulls = Nulls.SKIP
    )
    public Builder creditCardFirst6(Optional<String> creditCardFirst6) {
      this.creditCardFirst6 = creditCardFirst6;
      return this;
    }

    public Builder creditCardFirst6(String creditCardFirst6) {
      this.creditCardFirst6 = Optional.ofNullable(creditCardFirst6);
      return this;
    }

    @JsonSetter(
        value = "expirationYear",
        nulls = Nulls.SKIP
    )
    public Builder expirationYear(Optional<String> expirationYear) {
      this.expirationYear = expirationYear;
      return this;
    }

    public Builder expirationYear(String expirationYear) {
      this.expirationYear = Optional.ofNullable(expirationYear);
      return this;
    }

    @JsonSetter(
        value = "expirationMonth",
        nulls = Nulls.SKIP
    )
    public Builder expirationMonth(Optional<String> expirationMonth) {
      this.expirationMonth = expirationMonth;
      return this;
    }

    public Builder expirationMonth(String expirationMonth) {
      this.expirationMonth = Optional.ofNullable(expirationMonth);
      return this;
    }

    @JsonSetter(
        value = "creditCardBin",
        nulls = Nulls.SKIP
    )
    public Builder creditCardBin(Optional<String> creditCardBin) {
      this.creditCardBin = creditCardBin;
      return this;
    }

    public Builder creditCardBin(String creditCardBin) {
      this.creditCardBin = Optional.ofNullable(creditCardBin);
      return this;
    }

    @JsonSetter(
        value = "creditCardReference",
        nulls = Nulls.SKIP
    )
    public Builder creditCardReference(Optional<String> creditCardReference) {
      this.creditCardReference = creditCardReference;
      return this;
    }

    public Builder creditCardReference(String creditCardReference) {
      this.creditCardReference = Optional.ofNullable(creditCardReference);
      return this;
    }

    @JsonSetter(
        value = "cardHolderFirstName",
        nulls = Nulls.SKIP
    )
    public Builder cardHolderFirstName(Optional<String> cardHolderFirstName) {
      this.cardHolderFirstName = cardHolderFirstName;
      return this;
    }

    public Builder cardHolderFirstName(String cardHolderFirstName) {
      this.cardHolderFirstName = Optional.ofNullable(cardHolderFirstName);
      return this;
    }

    @JsonSetter(
        value = "cardHolderLastName",
        nulls = Nulls.SKIP
    )
    public Builder cardHolderLastName(Optional<String> cardHolderLastName) {
      this.cardHolderLastName = cardHolderLastName;
      return this;
    }

    public Builder cardHolderLastName(String cardHolderLastName) {
      this.cardHolderLastName = Optional.ofNullable(cardHolderLastName);
      return this;
    }

    @JsonSetter(
        value = "creditCardAddress",
        nulls = Nulls.SKIP
    )
    public Builder creditCardAddress(Optional<Address> creditCardAddress) {
      this.creditCardAddress = creditCardAddress;
      return this;
    }

    public Builder creditCardAddress(Address creditCardAddress) {
      this.creditCardAddress = Optional.ofNullable(creditCardAddress);
      return this;
    }

    @JsonSetter(
        value = "meta",
        nulls = Nulls.SKIP
    )
    public Builder meta(Optional<Map<String, Object>> meta) {
      this.meta = meta;
      return this;
    }

    public Builder meta(Map<String, Object> meta) {
      this.meta = Optional.ofNullable(meta);
      return this;
    }

    public EncryptedCreditCardPaymentInformation build() {
      return new EncryptedCreditCardPaymentInformation(id, encryptedInformation, creditCardLast4, cvv, creditCardType, creditCardFirst6, expirationYear, expirationMonth, creditCardBin, creditCardReference, cardHolderFirstName, cardHolderLastName, creditCardAddress, meta, additionalProperties);
    }
  }
}
