/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WalletHistoryPage.Builder.class
)
public final class WalletHistoryPage {
  private final Optional<Integer> page;

  private final Optional<Integer> pageSize;

  private final Optional<Integer> total;

  private final Optional<List<WalletHistory>> items;

  private final Map<String, Object> additionalProperties;

  private WalletHistoryPage(Optional<Integer> page, Optional<Integer> pageSize,
      Optional<Integer> total, Optional<List<WalletHistory>> items,
      Map<String, Object> additionalProperties) {
    this.page = page;
    this.pageSize = pageSize;
    this.total = total;
    this.items = items;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("page")
  public Optional<Integer> getPage() {
    return page;
  }

  @JsonProperty("pageSize")
  public Optional<Integer> getPageSize() {
    return pageSize;
  }

  @JsonProperty("total")
  public Optional<Integer> getTotal() {
    return total;
  }

  @JsonProperty("items")
  public Optional<List<WalletHistory>> getItems() {
    return items;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WalletHistoryPage && equalTo((WalletHistoryPage) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WalletHistoryPage other) {
    return page.equals(other.page) && pageSize.equals(other.pageSize) && total.equals(other.total) && items.equals(other.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.page, this.pageSize, this.total, this.items);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> page = Optional.empty();

    private Optional<Integer> pageSize = Optional.empty();

    private Optional<Integer> total = Optional.empty();

    private Optional<List<WalletHistory>> items = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(WalletHistoryPage other) {
      page(other.getPage());
      pageSize(other.getPageSize());
      total(other.getTotal());
      items(other.getItems());
      return this;
    }

    @JsonSetter(
        value = "page",
        nulls = Nulls.SKIP
    )
    public Builder page(Optional<Integer> page) {
      this.page = page;
      return this;
    }

    public Builder page(Integer page) {
      this.page = Optional.ofNullable(page);
      return this;
    }

    @JsonSetter(
        value = "pageSize",
        nulls = Nulls.SKIP
    )
    public Builder pageSize(Optional<Integer> pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public Builder pageSize(Integer pageSize) {
      this.pageSize = Optional.ofNullable(pageSize);
      return this;
    }

    @JsonSetter(
        value = "total",
        nulls = Nulls.SKIP
    )
    public Builder total(Optional<Integer> total) {
      this.total = total;
      return this;
    }

    public Builder total(Integer total) {
      this.total = Optional.ofNullable(total);
      return this;
    }

    @JsonSetter(
        value = "items",
        nulls = Nulls.SKIP
    )
    public Builder items(Optional<List<WalletHistory>> items) {
      this.items = items;
      return this;
    }

    public Builder items(List<WalletHistory> items) {
      this.items = Optional.ofNullable(items);
      return this;
    }

    public WalletHistoryPage build() {
      return new WalletHistoryPage(page, pageSize, total, items, additionalProperties);
    }
  }
}
