/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Business.Builder.class
)
public final class Business implements IUser {
  private final String id;

  private final Optional<UserStatus> status;

  private final Optional<UserStatusReason> statusReason;

  private final Optional<List<String>> tags;

  private final Optional<List<OneOfExternalPaymentInformation>> paymentInformation;

  private final Optional<String> sourceOfFunds;

  private final Optional<String> userCreationDate;

  private final Optional<Map<String, Object>> userPtiMeta;

  private final Optional<Map<String, Object>> userClientMeta;

  private final Optional<List<Ein>> biis;

  private final Optional<List<Address>> addresses;

  private final Optional<List<Email>> emails;

  private final BusinessOwner mainRepresentative;

  private final Optional<List<BusinessOwner>> coOwners;

  private final Optional<List<Phone>> phones;

  private final Optional<List<String>> sectors;

  private final Optional<String> creationDate;

  private final Optional<String> businessType;

  private final Optional<String> businessName;

  private final Optional<String> coutryOfIncorporation;

  private final Map<String, Object> additionalProperties;

  private Business(String id, Optional<UserStatus> status, Optional<UserStatusReason> statusReason,
      Optional<List<String>> tags,
      Optional<List<OneOfExternalPaymentInformation>> paymentInformation,
      Optional<String> sourceOfFunds, Optional<String> userCreationDate,
      Optional<Map<String, Object>> userPtiMeta, Optional<Map<String, Object>> userClientMeta,
      Optional<List<Ein>> biis, Optional<List<Address>> addresses, Optional<List<Email>> emails,
      BusinessOwner mainRepresentative, Optional<List<BusinessOwner>> coOwners,
      Optional<List<Phone>> phones, Optional<List<String>> sectors, Optional<String> creationDate,
      Optional<String> businessType, Optional<String> businessName,
      Optional<String> coutryOfIncorporation, Map<String, Object> additionalProperties) {
    this.id = id;
    this.status = status;
    this.statusReason = statusReason;
    this.tags = tags;
    this.paymentInformation = paymentInformation;
    this.sourceOfFunds = sourceOfFunds;
    this.userCreationDate = userCreationDate;
    this.userPtiMeta = userPtiMeta;
    this.userClientMeta = userClientMeta;
    this.biis = biis;
    this.addresses = addresses;
    this.emails = emails;
    this.mainRepresentative = mainRepresentative;
    this.coOwners = coOwners;
    this.phones = phones;
    this.sectors = sectors;
    this.creationDate = creationDate;
    this.businessType = businessType;
    this.businessName = businessName;
    this.coutryOfIncorporation = coutryOfIncorporation;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Unique identifier for this user. This value MUST be chosen and stored at user creation time.
   */
  @JsonProperty("id")
  @Override
  public String getId() {
    return id;
  }

  @JsonProperty("status")
  @Override
  public Optional<UserStatus> getStatus() {
    return status;
  }

  @JsonProperty("statusReason")
  @Override
  public Optional<UserStatusReason> getStatusReason() {
    return statusReason;
  }

  /**
   * @return Tag that characterizes the user. Used for internal classification purposes.
   */
  @JsonProperty("tags")
  @Override
  public Optional<List<String>> getTags() {
    return tags;
  }

  @JsonProperty("paymentInformation")
  @Override
  public Optional<List<OneOfExternalPaymentInformation>> getPaymentInformation() {
    return paymentInformation;
  }

  @JsonProperty("sourceOfFunds")
  @Override
  public Optional<String> getSourceOfFunds() {
    return sourceOfFunds;
  }

  /**
   * @return Optional ISO-8601 value. Used to provide the date the user was created in your system. If left empty, it will be populated at current time.
   */
  @JsonProperty("userCreationDate")
  @Override
  public Optional<String> getUserCreationDate() {
    return userCreationDate;
  }

  /**
   * @return key/value map of extra meta data for this request (used by PTI)
   */
  @JsonProperty("userPtiMeta")
  @Override
  public Optional<Map<String, Object>> getUserPtiMeta() {
    return userPtiMeta;
  }

  /**
   * @return key/value map of extra meta data for this request (used by Client)
   */
  @JsonProperty("userClientMeta")
  @Override
  public Optional<Map<String, Object>> getUserClientMeta() {
    return userClientMeta;
  }

  @JsonProperty("biis")
  public Optional<List<Ein>> getBiis() {
    return biis;
  }

  @JsonProperty("addresses")
  public Optional<List<Address>> getAddresses() {
    return addresses;
  }

  @JsonProperty("emails")
  public Optional<List<Email>> getEmails() {
    return emails;
  }

  @JsonProperty("mainRepresentative")
  public BusinessOwner getMainRepresentative() {
    return mainRepresentative;
  }

  @JsonProperty("coOwners")
  public Optional<List<BusinessOwner>> getCoOwners() {
    return coOwners;
  }

  @JsonProperty("phones")
  public Optional<List<Phone>> getPhones() {
    return phones;
  }

  @JsonProperty("sectors")
  public Optional<List<String>> getSectors() {
    return sectors;
  }

  /**
   * @return ISO 8601 formatted creation date of the business
   */
  @JsonProperty("creationDate")
  public Optional<String> getCreationDate() {
    return creationDate;
  }

  @JsonProperty("businessType")
  public Optional<String> getBusinessType() {
    return businessType;
  }

  @JsonProperty("businessName")
  public Optional<String> getBusinessName() {
    return businessName;
  }

  /**
   * @return ISO 3166 alpha 1 country code, example US
   */
  @JsonProperty("coutryOfIncorporation")
  public Optional<String> getCoutryOfIncorporation() {
    return coutryOfIncorporation;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Business && equalTo((Business) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Business other) {
    return id.equals(other.id) && status.equals(other.status) && statusReason.equals(other.statusReason) && tags.equals(other.tags) && paymentInformation.equals(other.paymentInformation) && sourceOfFunds.equals(other.sourceOfFunds) && userCreationDate.equals(other.userCreationDate) && userPtiMeta.equals(other.userPtiMeta) && userClientMeta.equals(other.userClientMeta) && biis.equals(other.biis) && addresses.equals(other.addresses) && emails.equals(other.emails) && mainRepresentative.equals(other.mainRepresentative) && coOwners.equals(other.coOwners) && phones.equals(other.phones) && sectors.equals(other.sectors) && creationDate.equals(other.creationDate) && businessType.equals(other.businessType) && businessName.equals(other.businessName) && coutryOfIncorporation.equals(other.coutryOfIncorporation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.status, this.statusReason, this.tags, this.paymentInformation, this.sourceOfFunds, this.userCreationDate, this.userPtiMeta, this.userClientMeta, this.biis, this.addresses, this.emails, this.mainRepresentative, this.coOwners, this.phones, this.sectors, this.creationDate, this.businessType, this.businessName, this.coutryOfIncorporation);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    MainRepresentativeStage id(@NotNull String id);

    Builder from(Business other);
  }

  public interface MainRepresentativeStage {
    _FinalStage mainRepresentative(@NotNull BusinessOwner mainRepresentative);
  }

  public interface _FinalStage {
    Business build();

    _FinalStage status(Optional<UserStatus> status);

    _FinalStage status(UserStatus status);

    _FinalStage statusReason(Optional<UserStatusReason> statusReason);

    _FinalStage statusReason(UserStatusReason statusReason);

    _FinalStage tags(Optional<List<String>> tags);

    _FinalStage tags(List<String> tags);

    _FinalStage paymentInformation(
        Optional<List<OneOfExternalPaymentInformation>> paymentInformation);

    _FinalStage paymentInformation(List<OneOfExternalPaymentInformation> paymentInformation);

    _FinalStage sourceOfFunds(Optional<String> sourceOfFunds);

    _FinalStage sourceOfFunds(String sourceOfFunds);

    _FinalStage userCreationDate(Optional<String> userCreationDate);

    _FinalStage userCreationDate(String userCreationDate);

    _FinalStage userPtiMeta(Optional<Map<String, Object>> userPtiMeta);

    _FinalStage userPtiMeta(Map<String, Object> userPtiMeta);

    _FinalStage userClientMeta(Optional<Map<String, Object>> userClientMeta);

    _FinalStage userClientMeta(Map<String, Object> userClientMeta);

    _FinalStage biis(Optional<List<Ein>> biis);

    _FinalStage biis(List<Ein> biis);

    _FinalStage addresses(Optional<List<Address>> addresses);

    _FinalStage addresses(List<Address> addresses);

    _FinalStage emails(Optional<List<Email>> emails);

    _FinalStage emails(List<Email> emails);

    _FinalStage coOwners(Optional<List<BusinessOwner>> coOwners);

    _FinalStage coOwners(List<BusinessOwner> coOwners);

    _FinalStage phones(Optional<List<Phone>> phones);

    _FinalStage phones(List<Phone> phones);

    _FinalStage sectors(Optional<List<String>> sectors);

    _FinalStage sectors(List<String> sectors);

    _FinalStage creationDate(Optional<String> creationDate);

    _FinalStage creationDate(String creationDate);

    _FinalStage businessType(Optional<String> businessType);

    _FinalStage businessType(String businessType);

    _FinalStage businessName(Optional<String> businessName);

    _FinalStage businessName(String businessName);

    _FinalStage coutryOfIncorporation(Optional<String> coutryOfIncorporation);

    _FinalStage coutryOfIncorporation(String coutryOfIncorporation);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, MainRepresentativeStage, _FinalStage {
    private String id;

    private BusinessOwner mainRepresentative;

    private Optional<String> coutryOfIncorporation = Optional.empty();

    private Optional<String> businessName = Optional.empty();

    private Optional<String> businessType = Optional.empty();

    private Optional<String> creationDate = Optional.empty();

    private Optional<List<String>> sectors = Optional.empty();

    private Optional<List<Phone>> phones = Optional.empty();

    private Optional<List<BusinessOwner>> coOwners = Optional.empty();

    private Optional<List<Email>> emails = Optional.empty();

    private Optional<List<Address>> addresses = Optional.empty();

    private Optional<List<Ein>> biis = Optional.empty();

    private Optional<Map<String, Object>> userClientMeta = Optional.empty();

    private Optional<Map<String, Object>> userPtiMeta = Optional.empty();

    private Optional<String> userCreationDate = Optional.empty();

    private Optional<String> sourceOfFunds = Optional.empty();

    private Optional<List<OneOfExternalPaymentInformation>> paymentInformation = Optional.empty();

    private Optional<List<String>> tags = Optional.empty();

    private Optional<UserStatusReason> statusReason = Optional.empty();

    private Optional<UserStatus> status = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(Business other) {
      id(other.getId());
      status(other.getStatus());
      statusReason(other.getStatusReason());
      tags(other.getTags());
      paymentInformation(other.getPaymentInformation());
      sourceOfFunds(other.getSourceOfFunds());
      userCreationDate(other.getUserCreationDate());
      userPtiMeta(other.getUserPtiMeta());
      userClientMeta(other.getUserClientMeta());
      biis(other.getBiis());
      addresses(other.getAddresses());
      emails(other.getEmails());
      mainRepresentative(other.getMainRepresentative());
      coOwners(other.getCoOwners());
      phones(other.getPhones());
      sectors(other.getSectors());
      creationDate(other.getCreationDate());
      businessType(other.getBusinessType());
      businessName(other.getBusinessName());
      coutryOfIncorporation(other.getCoutryOfIncorporation());
      return this;
    }

    /**
     * <p>Unique identifier for this user. This value MUST be chosen and stored at user creation time.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("id")
    public MainRepresentativeStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    @Override
    @JsonSetter("mainRepresentative")
    public _FinalStage mainRepresentative(@NotNull BusinessOwner mainRepresentative) {
      this.mainRepresentative = Objects.requireNonNull(mainRepresentative, "mainRepresentative must not be null");
      return this;
    }

    /**
     * <p>ISO 3166 alpha 1 country code, example US</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage coutryOfIncorporation(String coutryOfIncorporation) {
      this.coutryOfIncorporation = Optional.ofNullable(coutryOfIncorporation);
      return this;
    }

    @Override
    @JsonSetter(
        value = "coutryOfIncorporation",
        nulls = Nulls.SKIP
    )
    public _FinalStage coutryOfIncorporation(Optional<String> coutryOfIncorporation) {
      this.coutryOfIncorporation = coutryOfIncorporation;
      return this;
    }

    @Override
    public _FinalStage businessName(String businessName) {
      this.businessName = Optional.ofNullable(businessName);
      return this;
    }

    @Override
    @JsonSetter(
        value = "businessName",
        nulls = Nulls.SKIP
    )
    public _FinalStage businessName(Optional<String> businessName) {
      this.businessName = businessName;
      return this;
    }

    @Override
    public _FinalStage businessType(String businessType) {
      this.businessType = Optional.ofNullable(businessType);
      return this;
    }

    @Override
    @JsonSetter(
        value = "businessType",
        nulls = Nulls.SKIP
    )
    public _FinalStage businessType(Optional<String> businessType) {
      this.businessType = businessType;
      return this;
    }

    /**
     * <p>ISO 8601 formatted creation date of the business</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage creationDate(String creationDate) {
      this.creationDate = Optional.ofNullable(creationDate);
      return this;
    }

    @Override
    @JsonSetter(
        value = "creationDate",
        nulls = Nulls.SKIP
    )
    public _FinalStage creationDate(Optional<String> creationDate) {
      this.creationDate = creationDate;
      return this;
    }

    @Override
    public _FinalStage sectors(List<String> sectors) {
      this.sectors = Optional.ofNullable(sectors);
      return this;
    }

    @Override
    @JsonSetter(
        value = "sectors",
        nulls = Nulls.SKIP
    )
    public _FinalStage sectors(Optional<List<String>> sectors) {
      this.sectors = sectors;
      return this;
    }

    @Override
    public _FinalStage phones(List<Phone> phones) {
      this.phones = Optional.ofNullable(phones);
      return this;
    }

    @Override
    @JsonSetter(
        value = "phones",
        nulls = Nulls.SKIP
    )
    public _FinalStage phones(Optional<List<Phone>> phones) {
      this.phones = phones;
      return this;
    }

    @Override
    public _FinalStage coOwners(List<BusinessOwner> coOwners) {
      this.coOwners = Optional.ofNullable(coOwners);
      return this;
    }

    @Override
    @JsonSetter(
        value = "coOwners",
        nulls = Nulls.SKIP
    )
    public _FinalStage coOwners(Optional<List<BusinessOwner>> coOwners) {
      this.coOwners = coOwners;
      return this;
    }

    @Override
    public _FinalStage emails(List<Email> emails) {
      this.emails = Optional.ofNullable(emails);
      return this;
    }

    @Override
    @JsonSetter(
        value = "emails",
        nulls = Nulls.SKIP
    )
    public _FinalStage emails(Optional<List<Email>> emails) {
      this.emails = emails;
      return this;
    }

    @Override
    public _FinalStage addresses(List<Address> addresses) {
      this.addresses = Optional.ofNullable(addresses);
      return this;
    }

    @Override
    @JsonSetter(
        value = "addresses",
        nulls = Nulls.SKIP
    )
    public _FinalStage addresses(Optional<List<Address>> addresses) {
      this.addresses = addresses;
      return this;
    }

    @Override
    public _FinalStage biis(List<Ein> biis) {
      this.biis = Optional.ofNullable(biis);
      return this;
    }

    @Override
    @JsonSetter(
        value = "biis",
        nulls = Nulls.SKIP
    )
    public _FinalStage biis(Optional<List<Ein>> biis) {
      this.biis = biis;
      return this;
    }

    /**
     * <p>key/value map of extra meta data for this request (used by Client)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userClientMeta(Map<String, Object> userClientMeta) {
      this.userClientMeta = Optional.ofNullable(userClientMeta);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userClientMeta",
        nulls = Nulls.SKIP
    )
    public _FinalStage userClientMeta(Optional<Map<String, Object>> userClientMeta) {
      this.userClientMeta = userClientMeta;
      return this;
    }

    /**
     * <p>key/value map of extra meta data for this request (used by PTI)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userPtiMeta(Map<String, Object> userPtiMeta) {
      this.userPtiMeta = Optional.ofNullable(userPtiMeta);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userPtiMeta",
        nulls = Nulls.SKIP
    )
    public _FinalStage userPtiMeta(Optional<Map<String, Object>> userPtiMeta) {
      this.userPtiMeta = userPtiMeta;
      return this;
    }

    /**
     * <p>Optional ISO-8601 value. Used to provide the date the user was created in your system. If left empty, it will be populated at current time.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userCreationDate(String userCreationDate) {
      this.userCreationDate = Optional.ofNullable(userCreationDate);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userCreationDate",
        nulls = Nulls.SKIP
    )
    public _FinalStage userCreationDate(Optional<String> userCreationDate) {
      this.userCreationDate = userCreationDate;
      return this;
    }

    @Override
    public _FinalStage sourceOfFunds(String sourceOfFunds) {
      this.sourceOfFunds = Optional.ofNullable(sourceOfFunds);
      return this;
    }

    @Override
    @JsonSetter(
        value = "sourceOfFunds",
        nulls = Nulls.SKIP
    )
    public _FinalStage sourceOfFunds(Optional<String> sourceOfFunds) {
      this.sourceOfFunds = sourceOfFunds;
      return this;
    }

    @Override
    public _FinalStage paymentInformation(
        List<OneOfExternalPaymentInformation> paymentInformation) {
      this.paymentInformation = Optional.ofNullable(paymentInformation);
      return this;
    }

    @Override
    @JsonSetter(
        value = "paymentInformation",
        nulls = Nulls.SKIP
    )
    public _FinalStage paymentInformation(
        Optional<List<OneOfExternalPaymentInformation>> paymentInformation) {
      this.paymentInformation = paymentInformation;
      return this;
    }

    /**
     * <p>Tag that characterizes the user. Used for internal classification purposes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage tags(List<String> tags) {
      this.tags = Optional.ofNullable(tags);
      return this;
    }

    @Override
    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public _FinalStage tags(Optional<List<String>> tags) {
      this.tags = tags;
      return this;
    }

    @Override
    public _FinalStage statusReason(UserStatusReason statusReason) {
      this.statusReason = Optional.ofNullable(statusReason);
      return this;
    }

    @Override
    @JsonSetter(
        value = "statusReason",
        nulls = Nulls.SKIP
    )
    public _FinalStage statusReason(Optional<UserStatusReason> statusReason) {
      this.statusReason = statusReason;
      return this;
    }

    @Override
    public _FinalStage status(UserStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    @Override
    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public _FinalStage status(Optional<UserStatus> status) {
      this.status = status;
      return this;
    }

    @Override
    public Business build() {
      return new Business(id, status, statusReason, tags, paymentInformation, sourceOfFunds, userCreationDate, userPtiMeta, userClientMeta, biis, addresses, emails, mainRepresentative, coOwners, phones, sectors, creationDate, businessType, businessName, coutryOfIncorporation, additionalProperties);
    }
  }
}
