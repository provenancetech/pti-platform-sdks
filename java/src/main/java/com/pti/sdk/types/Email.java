/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Email.Builder.class
)
public final class Email {
  private final Optional<Boolean> default_;

  private final String address;

  private final Map<String, Object> additionalProperties;

  private Email(Optional<Boolean> default_, String address,
      Map<String, Object> additionalProperties) {
    this.default_ = default_;
    this.address = address;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("default")
  public Optional<Boolean> getDefault() {
    return default_;
  }

  @JsonProperty("address")
  public String getAddress() {
    return address;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Email && equalTo((Email) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Email other) {
    return default_.equals(other.default_) && address.equals(other.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.default_, this.address);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static AddressStage builder() {
    return new Builder();
  }

  public interface AddressStage {
    _FinalStage address(@NotNull String address);

    Builder from(Email other);
  }

  public interface _FinalStage {
    Email build();

    _FinalStage default_(Optional<Boolean> default_);

    _FinalStage default_(Boolean default_);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AddressStage, _FinalStage {
    private String address;

    private Optional<Boolean> default_ = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(Email other) {
      default_(other.getDefault());
      address(other.getAddress());
      return this;
    }

    @Override
    @JsonSetter("address")
    public _FinalStage address(@NotNull String address) {
      this.address = Objects.requireNonNull(address, "address must not be null");
      return this;
    }

    @Override
    public _FinalStage default_(Boolean default_) {
      this.default_ = Optional.ofNullable(default_);
      return this;
    }

    @Override
    @JsonSetter(
        value = "default",
        nulls = Nulls.SKIP
    )
    public _FinalStage default_(Optional<Boolean> default_) {
      this.default_ = default_;
      return this;
    }

    @Override
    public Email build() {
      return new Email(default_, address, additionalProperties);
    }
  }
}
