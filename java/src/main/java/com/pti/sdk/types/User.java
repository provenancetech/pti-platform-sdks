/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = User.Builder.class
)
public final class User implements IUser {
  private final String id;

  private final Optional<UserStatus> status;

  private final Optional<UserStatusReason> statusReason;

  private final Optional<List<String>> tags;

  private final Optional<List<OneOfExternalPaymentInformation>> paymentInformation;

  private final Optional<String> sourceOfFunds;

  private final Optional<String> userCreationDate;

  private final Optional<Map<String, Object>> userPtiMeta;

  private final Optional<Map<String, Object>> userClientMeta;

  private final Map<String, Object> additionalProperties;

  private User(String id, Optional<UserStatus> status, Optional<UserStatusReason> statusReason,
      Optional<List<String>> tags,
      Optional<List<OneOfExternalPaymentInformation>> paymentInformation,
      Optional<String> sourceOfFunds, Optional<String> userCreationDate,
      Optional<Map<String, Object>> userPtiMeta, Optional<Map<String, Object>> userClientMeta,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.status = status;
    this.statusReason = statusReason;
    this.tags = tags;
    this.paymentInformation = paymentInformation;
    this.sourceOfFunds = sourceOfFunds;
    this.userCreationDate = userCreationDate;
    this.userPtiMeta = userPtiMeta;
    this.userClientMeta = userClientMeta;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Unique identifier for this user. This value MUST be chosen and stored at user creation time.
   */
  @JsonProperty("id")
  @Override
  public String getId() {
    return id;
  }

  @JsonProperty("status")
  @Override
  public Optional<UserStatus> getStatus() {
    return status;
  }

  @JsonProperty("statusReason")
  @Override
  public Optional<UserStatusReason> getStatusReason() {
    return statusReason;
  }

  /**
   * @return Tag that characterizes the user. Used for internal classification purposes.
   */
  @JsonProperty("tags")
  @Override
  public Optional<List<String>> getTags() {
    return tags;
  }

  @JsonProperty("paymentInformation")
  @Override
  public Optional<List<OneOfExternalPaymentInformation>> getPaymentInformation() {
    return paymentInformation;
  }

  @JsonProperty("sourceOfFunds")
  @Override
  public Optional<String> getSourceOfFunds() {
    return sourceOfFunds;
  }

  /**
   * @return Optional ISO-8601 value. Used to provide the date the user was created in your system. If left empty, it will be populated at current time.
   */
  @JsonProperty("userCreationDate")
  @Override
  public Optional<String> getUserCreationDate() {
    return userCreationDate;
  }

  /**
   * @return key/value map of extra meta data for this request (used by PTI)
   */
  @JsonProperty("userPtiMeta")
  @Override
  public Optional<Map<String, Object>> getUserPtiMeta() {
    return userPtiMeta;
  }

  /**
   * @return key/value map of extra meta data for this request (used by Client)
   */
  @JsonProperty("userClientMeta")
  @Override
  public Optional<Map<String, Object>> getUserClientMeta() {
    return userClientMeta;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(User other) {
    return id.equals(other.id) && status.equals(other.status) && statusReason.equals(other.statusReason) && tags.equals(other.tags) && paymentInformation.equals(other.paymentInformation) && sourceOfFunds.equals(other.sourceOfFunds) && userCreationDate.equals(other.userCreationDate) && userPtiMeta.equals(other.userPtiMeta) && userClientMeta.equals(other.userClientMeta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.status, this.statusReason, this.tags, this.paymentInformation, this.sourceOfFunds, this.userCreationDate, this.userPtiMeta, this.userClientMeta);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(@NotNull String id);

    Builder from(User other);
  }

  public interface _FinalStage {
    User build();

    _FinalStage status(Optional<UserStatus> status);

    _FinalStage status(UserStatus status);

    _FinalStage statusReason(Optional<UserStatusReason> statusReason);

    _FinalStage statusReason(UserStatusReason statusReason);

    _FinalStage tags(Optional<List<String>> tags);

    _FinalStage tags(List<String> tags);

    _FinalStage paymentInformation(
        Optional<List<OneOfExternalPaymentInformation>> paymentInformation);

    _FinalStage paymentInformation(List<OneOfExternalPaymentInformation> paymentInformation);

    _FinalStage sourceOfFunds(Optional<String> sourceOfFunds);

    _FinalStage sourceOfFunds(String sourceOfFunds);

    _FinalStage userCreationDate(Optional<String> userCreationDate);

    _FinalStage userCreationDate(String userCreationDate);

    _FinalStage userPtiMeta(Optional<Map<String, Object>> userPtiMeta);

    _FinalStage userPtiMeta(Map<String, Object> userPtiMeta);

    _FinalStage userClientMeta(Optional<Map<String, Object>> userClientMeta);

    _FinalStage userClientMeta(Map<String, Object> userClientMeta);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, _FinalStage {
    private String id;

    private Optional<Map<String, Object>> userClientMeta = Optional.empty();

    private Optional<Map<String, Object>> userPtiMeta = Optional.empty();

    private Optional<String> userCreationDate = Optional.empty();

    private Optional<String> sourceOfFunds = Optional.empty();

    private Optional<List<OneOfExternalPaymentInformation>> paymentInformation = Optional.empty();

    private Optional<List<String>> tags = Optional.empty();

    private Optional<UserStatusReason> statusReason = Optional.empty();

    private Optional<UserStatus> status = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(User other) {
      id(other.getId());
      status(other.getStatus());
      statusReason(other.getStatusReason());
      tags(other.getTags());
      paymentInformation(other.getPaymentInformation());
      sourceOfFunds(other.getSourceOfFunds());
      userCreationDate(other.getUserCreationDate());
      userPtiMeta(other.getUserPtiMeta());
      userClientMeta(other.getUserClientMeta());
      return this;
    }

    /**
     * <p>Unique identifier for this user. This value MUST be chosen and stored at user creation time.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("id")
    public _FinalStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>key/value map of extra meta data for this request (used by Client)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userClientMeta(Map<String, Object> userClientMeta) {
      this.userClientMeta = Optional.ofNullable(userClientMeta);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userClientMeta",
        nulls = Nulls.SKIP
    )
    public _FinalStage userClientMeta(Optional<Map<String, Object>> userClientMeta) {
      this.userClientMeta = userClientMeta;
      return this;
    }

    /**
     * <p>key/value map of extra meta data for this request (used by PTI)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userPtiMeta(Map<String, Object> userPtiMeta) {
      this.userPtiMeta = Optional.ofNullable(userPtiMeta);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userPtiMeta",
        nulls = Nulls.SKIP
    )
    public _FinalStage userPtiMeta(Optional<Map<String, Object>> userPtiMeta) {
      this.userPtiMeta = userPtiMeta;
      return this;
    }

    /**
     * <p>Optional ISO-8601 value. Used to provide the date the user was created in your system. If left empty, it will be populated at current time.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage userCreationDate(String userCreationDate) {
      this.userCreationDate = Optional.ofNullable(userCreationDate);
      return this;
    }

    @Override
    @JsonSetter(
        value = "userCreationDate",
        nulls = Nulls.SKIP
    )
    public _FinalStage userCreationDate(Optional<String> userCreationDate) {
      this.userCreationDate = userCreationDate;
      return this;
    }

    @Override
    public _FinalStage sourceOfFunds(String sourceOfFunds) {
      this.sourceOfFunds = Optional.ofNullable(sourceOfFunds);
      return this;
    }

    @Override
    @JsonSetter(
        value = "sourceOfFunds",
        nulls = Nulls.SKIP
    )
    public _FinalStage sourceOfFunds(Optional<String> sourceOfFunds) {
      this.sourceOfFunds = sourceOfFunds;
      return this;
    }

    @Override
    public _FinalStage paymentInformation(
        List<OneOfExternalPaymentInformation> paymentInformation) {
      this.paymentInformation = Optional.ofNullable(paymentInformation);
      return this;
    }

    @Override
    @JsonSetter(
        value = "paymentInformation",
        nulls = Nulls.SKIP
    )
    public _FinalStage paymentInformation(
        Optional<List<OneOfExternalPaymentInformation>> paymentInformation) {
      this.paymentInformation = paymentInformation;
      return this;
    }

    /**
     * <p>Tag that characterizes the user. Used for internal classification purposes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage tags(List<String> tags) {
      this.tags = Optional.ofNullable(tags);
      return this;
    }

    @Override
    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public _FinalStage tags(Optional<List<String>> tags) {
      this.tags = tags;
      return this;
    }

    @Override
    public _FinalStage statusReason(UserStatusReason statusReason) {
      this.statusReason = Optional.ofNullable(statusReason);
      return this;
    }

    @Override
    @JsonSetter(
        value = "statusReason",
        nulls = Nulls.SKIP
    )
    public _FinalStage statusReason(Optional<UserStatusReason> statusReason) {
      this.statusReason = statusReason;
      return this;
    }

    @Override
    public _FinalStage status(UserStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    @Override
    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public _FinalStage status(Optional<UserStatus> status) {
      this.status = status;
      return this;
    }

    @Override
    public User build() {
      return new User(id, status, statusReason, tags, paymentInformation, sourceOfFunds, userCreationDate, userPtiMeta, userClientMeta, additionalProperties);
    }
  }
}
