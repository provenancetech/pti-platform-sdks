/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ManagedError.Builder.class
)
public final class ManagedError implements IManagedError {
  private final ErrorType type;

  private final int code;

  private final Map<String, Object> additionalProperties;

  private ManagedError(ErrorType type, int code, Map<String, Object> additionalProperties) {
    this.type = type;
    this.code = code;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("type")
  @Override
  public ErrorType getType() {
    return type;
  }

  /**
   * @return <h1>Error codes descriptions</h1>
   * NO_ERROR(0)
   * INVALID_REQUEST(1000)
   * MIN_INFO_MISSING(1001)
   * MIN_ASSESSMENT_MISSING(1002)
   * ALREADY_IN_PROGRESS(1003)
   * MISSING_WALLET(1004)
   * WALLETS_DIFFERENT_CURRENCY(1005)
   * WALLETS_SAME_CURRENCY(1006)
   * SOURCE_WALLET_DESTINATION_TOKEN_ONLY(1007)
   * ITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS(1008)
   * INVALID_USER_TAG(1009)
   * MISSING_TRANSACTION_GROUP_ID(1010)
   * DIFFERENT_BUY_SELL_AMOUNT(1011)
   * DIFFERENT_BUY_SELL_CURRENCIES(1012)
   * NO_INTER_CLIENTS_TRANSFERS(2000)
   * CLIENT_CONFIGURATION_ERROR(2001)
   * UNSUPPORTED_OPERATION(2002)
   * COUNTRY_NOT_SUPPORTED(2003)
   * NOT_ENOUGH_FUNDS(3000)
   * INVALID_ASSET_OWNERSHIP(3001)
   * FEES_WALLET_NOT_FOUND(3002)
   * REVERT_ONLY_CHARGE_BACK(3003)
   * MISSING_CORRESPONDING_BUY_TRANSACTION(3004)
   * ALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR(3005)
   * BUY_TRANSACTION_NOT_SETTLED(3006)
   * FIAT_ONLY(3007)
   * SOURCE_DESTINATION_WALLET(3008)
   * INVALID_SOURCE_CURRENCY(3009)
   * INVALID_DESTINATION_CURRENCY(3010)
   * USD_WALLET_ONLY(3011)
   * BANK_ONLY(4000)
   * MISSING_EMAIL_ADDRESS(4001)
   * MISSING_BANK_ACCOUNT_INFORMATION(4002)
   * MISSING_BANK_ACCOUNT_NUMBER_INFORMATION(4003)
   * MISSING_BANK_ACCOUNT_TYPE(4004)
   * MANDATORY_IP_ADDRESS(5000)
   * MANDATORY_EMAIL_ADDRESS(5001)
   * MISSING_CC_INFO(5002)
   * CC_ONLY(5003)
   * UNABLE_TO_PROVIDE_ESTIMATES(6000)
   * FUNDING_FROM_CRYPTO_ONLY(6001)
   * WITHDRAWAL_FROM_WALLET_TO_CRYPTO(6002)
   * SOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY(6003)
   */
  @JsonProperty("code")
  @Override
  public int getCode() {
    return code;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ManagedError && equalTo((ManagedError) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(ManagedError other) {
    return type.equals(other.type) && code == other.code;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.type, this.code);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TypeStage builder() {
    return new Builder();
  }

  public interface TypeStage {
    CodeStage type(@NotNull ErrorType type);

    Builder from(ManagedError other);
  }

  public interface CodeStage {
    _FinalStage code(int code);
  }

  public interface _FinalStage {
    ManagedError build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TypeStage, CodeStage, _FinalStage {
    private ErrorType type;

    private int code;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(ManagedError other) {
      type(other.getType());
      code(other.getCode());
      return this;
    }

    @Override
    @JsonSetter("type")
    public CodeStage type(@NotNull ErrorType type) {
      this.type = Objects.requireNonNull(type, "type must not be null");
      return this;
    }

    /**
     * <h1>Error codes descriptions</h1>
     * <p>NO_ERROR(0)
     * INVALID_REQUEST(1000)
     * MIN_INFO_MISSING(1001)
     * MIN_ASSESSMENT_MISSING(1002)
     * ALREADY_IN_PROGRESS(1003)
     * MISSING_WALLET(1004)
     * WALLETS_DIFFERENT_CURRENCY(1005)
     * WALLETS_SAME_CURRENCY(1006)
     * SOURCE_WALLET_DESTINATION_TOKEN_ONLY(1007)
     * ITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS(1008)
     * INVALID_USER_TAG(1009)
     * MISSING_TRANSACTION_GROUP_ID(1010)
     * DIFFERENT_BUY_SELL_AMOUNT(1011)
     * DIFFERENT_BUY_SELL_CURRENCIES(1012)
     * NO_INTER_CLIENTS_TRANSFERS(2000)
     * CLIENT_CONFIGURATION_ERROR(2001)
     * UNSUPPORTED_OPERATION(2002)
     * COUNTRY_NOT_SUPPORTED(2003)
     * NOT_ENOUGH_FUNDS(3000)
     * INVALID_ASSET_OWNERSHIP(3001)
     * FEES_WALLET_NOT_FOUND(3002)
     * REVERT_ONLY_CHARGE_BACK(3003)
     * MISSING_CORRESPONDING_BUY_TRANSACTION(3004)
     * ALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR(3005)
     * BUY_TRANSACTION_NOT_SETTLED(3006)
     * FIAT_ONLY(3007)
     * SOURCE_DESTINATION_WALLET(3008)
     * INVALID_SOURCE_CURRENCY(3009)
     * INVALID_DESTINATION_CURRENCY(3010)
     * USD_WALLET_ONLY(3011)
     * BANK_ONLY(4000)
     * MISSING_EMAIL_ADDRESS(4001)
     * MISSING_BANK_ACCOUNT_INFORMATION(4002)
     * MISSING_BANK_ACCOUNT_NUMBER_INFORMATION(4003)
     * MISSING_BANK_ACCOUNT_TYPE(4004)
     * MANDATORY_IP_ADDRESS(5000)
     * MANDATORY_EMAIL_ADDRESS(5001)
     * MISSING_CC_INFO(5002)
     * CC_ONLY(5003)
     * UNABLE_TO_PROVIDE_ESTIMATES(6000)
     * FUNDING_FROM_CRYPTO_ONLY(6001)
     * WITHDRAWAL_FROM_WALLET_TO_CRYPTO(6002)
     * SOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY(6003)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("code")
    public _FinalStage code(int code) {
      this.code = code;
      return this;
    }

    @Override
    public ManagedError build() {
      return new ManagedError(type, code, additionalProperties);
    }
  }
}
