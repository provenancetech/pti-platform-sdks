/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Device.Builder.class
)
public final class Device {
  private final String fingerPrint;

  private final DeviceProviderName providerName;

  private final Optional<String> deviceData;

  private final Map<String, Object> additionalProperties;

  private Device(String fingerPrint, DeviceProviderName providerName, Optional<String> deviceData,
      Map<String, Object> additionalProperties) {
    this.fingerPrint = fingerPrint;
    this.providerName = providerName;
    this.deviceData = deviceData;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("fingerPrint")
  public String getFingerPrint() {
    return fingerPrint;
  }

  @JsonProperty("providerName")
  public DeviceProviderName getProviderName() {
    return providerName;
  }

  @JsonProperty("deviceData")
  public Optional<String> getDeviceData() {
    return deviceData;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Device && equalTo((Device) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Device other) {
    return fingerPrint.equals(other.fingerPrint) && providerName.equals(other.providerName) && deviceData.equals(other.deviceData);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.fingerPrint, this.providerName, this.deviceData);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static FingerPrintStage builder() {
    return new Builder();
  }

  public interface FingerPrintStage {
    ProviderNameStage fingerPrint(@NotNull String fingerPrint);

    Builder from(Device other);
  }

  public interface ProviderNameStage {
    _FinalStage providerName(@NotNull DeviceProviderName providerName);
  }

  public interface _FinalStage {
    Device build();

    _FinalStage deviceData(Optional<String> deviceData);

    _FinalStage deviceData(String deviceData);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements FingerPrintStage, ProviderNameStage, _FinalStage {
    private String fingerPrint;

    private DeviceProviderName providerName;

    private Optional<String> deviceData = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Device other) {
      fingerPrint(other.getFingerPrint());
      providerName(other.getProviderName());
      deviceData(other.getDeviceData());
      return this;
    }

    @java.lang.Override
    @JsonSetter("fingerPrint")
    public ProviderNameStage fingerPrint(@NotNull String fingerPrint) {
      this.fingerPrint = Objects.requireNonNull(fingerPrint, "fingerPrint must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("providerName")
    public _FinalStage providerName(@NotNull DeviceProviderName providerName) {
      this.providerName = Objects.requireNonNull(providerName, "providerName must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage deviceData(String deviceData) {
      this.deviceData = Optional.ofNullable(deviceData);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "deviceData",
        nulls = Nulls.SKIP
    )
    public _FinalStage deviceData(Optional<String> deviceData) {
      this.deviceData = deviceData;
      return this;
    }

    @java.lang.Override
    public Device build() {
      return new Device(fingerPrint, providerName, deviceData, additionalProperties);
    }
  }
}
