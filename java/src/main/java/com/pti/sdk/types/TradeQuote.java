/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TradeQuote.Builder.class
)
public final class TradeQuote {
  private final Optional<Double> estimatedFillPricePerUnit;

  private final Optional<String> sourceCurrency;

  private final Optional<String> destinationCurrency;

  private final Optional<Double> amount;

  private final Map<String, Object> additionalProperties;

  private TradeQuote(Optional<Double> estimatedFillPricePerUnit, Optional<String> sourceCurrency,
      Optional<String> destinationCurrency, Optional<Double> amount,
      Map<String, Object> additionalProperties) {
    this.estimatedFillPricePerUnit = estimatedFillPricePerUnit;
    this.sourceCurrency = sourceCurrency;
    this.destinationCurrency = destinationCurrency;
    this.amount = amount;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("estimatedFillPricePerUnit")
  public Optional<Double> getEstimatedFillPricePerUnit() {
    return estimatedFillPricePerUnit;
  }

  @JsonProperty("sourceCurrency")
  public Optional<String> getSourceCurrency() {
    return sourceCurrency;
  }

  @JsonProperty("destinationCurrency")
  public Optional<String> getDestinationCurrency() {
    return destinationCurrency;
  }

  @JsonProperty("amount")
  public Optional<Double> getAmount() {
    return amount;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TradeQuote && equalTo((TradeQuote) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(TradeQuote other) {
    return estimatedFillPricePerUnit.equals(other.estimatedFillPricePerUnit) && sourceCurrency.equals(other.sourceCurrency) && destinationCurrency.equals(other.destinationCurrency) && amount.equals(other.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.estimatedFillPricePerUnit, this.sourceCurrency, this.destinationCurrency, this.amount);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> estimatedFillPricePerUnit = Optional.empty();

    private Optional<String> sourceCurrency = Optional.empty();

    private Optional<String> destinationCurrency = Optional.empty();

    private Optional<Double> amount = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(TradeQuote other) {
      estimatedFillPricePerUnit(other.getEstimatedFillPricePerUnit());
      sourceCurrency(other.getSourceCurrency());
      destinationCurrency(other.getDestinationCurrency());
      amount(other.getAmount());
      return this;
    }

    @JsonSetter(
        value = "estimatedFillPricePerUnit",
        nulls = Nulls.SKIP
    )
    public Builder estimatedFillPricePerUnit(Optional<Double> estimatedFillPricePerUnit) {
      this.estimatedFillPricePerUnit = estimatedFillPricePerUnit;
      return this;
    }

    public Builder estimatedFillPricePerUnit(Double estimatedFillPricePerUnit) {
      this.estimatedFillPricePerUnit = Optional.ofNullable(estimatedFillPricePerUnit);
      return this;
    }

    @JsonSetter(
        value = "sourceCurrency",
        nulls = Nulls.SKIP
    )
    public Builder sourceCurrency(Optional<String> sourceCurrency) {
      this.sourceCurrency = sourceCurrency;
      return this;
    }

    public Builder sourceCurrency(String sourceCurrency) {
      this.sourceCurrency = Optional.ofNullable(sourceCurrency);
      return this;
    }

    @JsonSetter(
        value = "destinationCurrency",
        nulls = Nulls.SKIP
    )
    public Builder destinationCurrency(Optional<String> destinationCurrency) {
      this.destinationCurrency = destinationCurrency;
      return this;
    }

    public Builder destinationCurrency(String destinationCurrency) {
      this.destinationCurrency = Optional.ofNullable(destinationCurrency);
      return this;
    }

    @JsonSetter(
        value = "amount",
        nulls = Nulls.SKIP
    )
    public Builder amount(Optional<Double> amount) {
      this.amount = amount;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = Optional.ofNullable(amount);
      return this;
    }

    public TradeQuote build() {
      return new TradeQuote(estimatedFillPricePerUnit, sourceCurrency, destinationCurrency, amount, additionalProperties);
    }
  }
}
