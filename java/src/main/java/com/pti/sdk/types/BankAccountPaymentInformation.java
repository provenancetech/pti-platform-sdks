/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BankAccountPaymentInformation.Builder.class
)
public final class BankAccountPaymentInformation implements IExternalPaymentInformation {
  private final Optional<String> id;

  private final Optional<String> bankAccountNumber;

  private final Optional<BankAccountPaymentInformationBankAccountType> bankAccountType;

  private final Optional<String> accountHolderName;

  private final Optional<String> bankSwiftCode;

  private final Optional<String> bankRoutingNumber;

  private final Optional<String> bankRoutingCheckDigit;

  private final Optional<String> accountBankName;

  private final Map<String, Object> additionalProperties;

  private BankAccountPaymentInformation(Optional<String> id, Optional<String> bankAccountNumber,
      Optional<BankAccountPaymentInformationBankAccountType> bankAccountType,
      Optional<String> accountHolderName, Optional<String> bankSwiftCode,
      Optional<String> bankRoutingNumber, Optional<String> bankRoutingCheckDigit,
      Optional<String> accountBankName, Map<String, Object> additionalProperties) {
    this.id = id;
    this.bankAccountNumber = bankAccountNumber;
    this.bankAccountType = bankAccountType;
    this.accountHolderName = accountHolderName;
    this.bankSwiftCode = bankSwiftCode;
    this.bankRoutingNumber = bankRoutingNumber;
    this.bankRoutingCheckDigit = bankRoutingCheckDigit;
    this.accountBankName = accountBankName;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Unique identifier for the Payment Information, must be used to refer to a Payment Information for a payment
   */
  @JsonProperty("id")
  @Override
  public Optional<String> getId() {
    return id;
  }

  /**
   * @return Valid bank account number, Required for ACH and WIRE
   */
  @JsonProperty("bankAccountNumber")
  public Optional<String> getBankAccountNumber() {
    return bankAccountNumber;
  }

  /**
   * @return Type of bank account, Required for ACH and WIRE
   */
  @JsonProperty("bankAccountType")
  public Optional<BankAccountPaymentInformationBankAccountType> getBankAccountType() {
    return bankAccountType;
  }

  /**
   * @return Full name of the holder of the bank account. Required on creation.
   */
  @JsonProperty("accountHolderName")
  public Optional<String> getAccountHolderName() {
    return accountHolderName;
  }

  /**
   * @return Valid bank swift code, Required for International WIRE
   */
  @JsonProperty("bankSwiftCode")
  public Optional<String> getBankSwiftCode() {
    return bankSwiftCode;
  }

  /**
   * @return Valid bank routing number, between 7 and 12 digits, Required for ACH and WIRE
   */
  @JsonProperty("bankRoutingNumber")
  public Optional<String> getBankRoutingNumber() {
    return bankRoutingNumber;
  }

  /**
   * @return Valid bank routing check digit, 1 digit, Required for ACH and WIRE
   */
  @JsonProperty("bankRoutingCheckDigit")
  public Optional<String> getBankRoutingCheckDigit() {
    return bankRoutingCheckDigit;
  }

  /**
   * @return Name of the bank of the account, Required for OUTGOING WIRE transactions, persisted as part of the Payment Information
   */
  @JsonProperty("accountBankName")
  public Optional<String> getAccountBankName() {
    return accountBankName;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BankAccountPaymentInformation && equalTo((BankAccountPaymentInformation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(BankAccountPaymentInformation other) {
    return id.equals(other.id) && bankAccountNumber.equals(other.bankAccountNumber) && bankAccountType.equals(other.bankAccountType) && accountHolderName.equals(other.accountHolderName) && bankSwiftCode.equals(other.bankSwiftCode) && bankRoutingNumber.equals(other.bankRoutingNumber) && bankRoutingCheckDigit.equals(other.bankRoutingCheckDigit) && accountBankName.equals(other.accountBankName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.bankAccountNumber, this.bankAccountType, this.accountHolderName, this.bankSwiftCode, this.bankRoutingNumber, this.bankRoutingCheckDigit, this.accountBankName);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<String> bankAccountNumber = Optional.empty();

    private Optional<BankAccountPaymentInformationBankAccountType> bankAccountType = Optional.empty();

    private Optional<String> accountHolderName = Optional.empty();

    private Optional<String> bankSwiftCode = Optional.empty();

    private Optional<String> bankRoutingNumber = Optional.empty();

    private Optional<String> bankRoutingCheckDigit = Optional.empty();

    private Optional<String> accountBankName = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(BankAccountPaymentInformation other) {
      id(other.getId());
      bankAccountNumber(other.getBankAccountNumber());
      bankAccountType(other.getBankAccountType());
      accountHolderName(other.getAccountHolderName());
      bankSwiftCode(other.getBankSwiftCode());
      bankRoutingNumber(other.getBankRoutingNumber());
      bankRoutingCheckDigit(other.getBankRoutingCheckDigit());
      accountBankName(other.getAccountBankName());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "bankAccountNumber",
        nulls = Nulls.SKIP
    )
    public Builder bankAccountNumber(Optional<String> bankAccountNumber) {
      this.bankAccountNumber = bankAccountNumber;
      return this;
    }

    public Builder bankAccountNumber(String bankAccountNumber) {
      this.bankAccountNumber = Optional.ofNullable(bankAccountNumber);
      return this;
    }

    @JsonSetter(
        value = "bankAccountType",
        nulls = Nulls.SKIP
    )
    public Builder bankAccountType(
        Optional<BankAccountPaymentInformationBankAccountType> bankAccountType) {
      this.bankAccountType = bankAccountType;
      return this;
    }

    public Builder bankAccountType(BankAccountPaymentInformationBankAccountType bankAccountType) {
      this.bankAccountType = Optional.ofNullable(bankAccountType);
      return this;
    }

    @JsonSetter(
        value = "accountHolderName",
        nulls = Nulls.SKIP
    )
    public Builder accountHolderName(Optional<String> accountHolderName) {
      this.accountHolderName = accountHolderName;
      return this;
    }

    public Builder accountHolderName(String accountHolderName) {
      this.accountHolderName = Optional.ofNullable(accountHolderName);
      return this;
    }

    @JsonSetter(
        value = "bankSwiftCode",
        nulls = Nulls.SKIP
    )
    public Builder bankSwiftCode(Optional<String> bankSwiftCode) {
      this.bankSwiftCode = bankSwiftCode;
      return this;
    }

    public Builder bankSwiftCode(String bankSwiftCode) {
      this.bankSwiftCode = Optional.ofNullable(bankSwiftCode);
      return this;
    }

    @JsonSetter(
        value = "bankRoutingNumber",
        nulls = Nulls.SKIP
    )
    public Builder bankRoutingNumber(Optional<String> bankRoutingNumber) {
      this.bankRoutingNumber = bankRoutingNumber;
      return this;
    }

    public Builder bankRoutingNumber(String bankRoutingNumber) {
      this.bankRoutingNumber = Optional.ofNullable(bankRoutingNumber);
      return this;
    }

    @JsonSetter(
        value = "bankRoutingCheckDigit",
        nulls = Nulls.SKIP
    )
    public Builder bankRoutingCheckDigit(Optional<String> bankRoutingCheckDigit) {
      this.bankRoutingCheckDigit = bankRoutingCheckDigit;
      return this;
    }

    public Builder bankRoutingCheckDigit(String bankRoutingCheckDigit) {
      this.bankRoutingCheckDigit = Optional.ofNullable(bankRoutingCheckDigit);
      return this;
    }

    @JsonSetter(
        value = "accountBankName",
        nulls = Nulls.SKIP
    )
    public Builder accountBankName(Optional<String> accountBankName) {
      this.accountBankName = accountBankName;
      return this;
    }

    public Builder accountBankName(String accountBankName) {
      this.accountBankName = Optional.ofNullable(accountBankName);
      return this;
    }

    public BankAccountPaymentInformation build() {
      return new BankAccountPaymentInformation(id, bankAccountNumber, bankAccountType, accountHolderName, bankSwiftCode, bankRoutingNumber, bankRoutingCheckDigit, accountBankName, additionalProperties);
    }
  }
}
