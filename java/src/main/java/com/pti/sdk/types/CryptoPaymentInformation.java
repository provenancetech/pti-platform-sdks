/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CryptoPaymentInformation.Builder.class
)
public final class CryptoPaymentInformation implements IExternalPaymentInformation {
  private final Optional<String> id;

  private final String walletAddress;

  private final String currency;

  private final String network;

  private final Optional<Boolean> privateBlockchain;

  private final Optional<Map<String, Object>> clientMeta;

  private final Map<String, Object> additionalProperties;

  private CryptoPaymentInformation(Optional<String> id, String walletAddress, String currency,
      String network, Optional<Boolean> privateBlockchain, Optional<Map<String, Object>> clientMeta,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.walletAddress = walletAddress;
    this.currency = currency;
    this.network = network;
    this.privateBlockchain = privateBlockchain;
    this.clientMeta = clientMeta;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Unique identifier for the Payment Information, must be used to refer to a Payment Information for a payment
   */
  @JsonProperty("id")
  @Override
  public Optional<String> getId() {
    return id;
  }

  /**
   * @return Blockchain address for the Wallet
   */
  @JsonProperty("walletAddress")
  public String getWalletAddress() {
    return walletAddress;
  }

  /**
   * @return Token symbol that your User is trading
   */
  @JsonProperty("currency")
  public String getCurrency() {
    return currency;
  }

  /**
   * @return Blockchain network name, example ethereum, bitcoin, solana
   */
  @JsonProperty("network")
  public String getNetwork() {
    return network;
  }

  /**
   * @return If blockchain is a private chain
   */
  @JsonProperty("privateBlockchain")
  public Optional<Boolean> getPrivateBlockchain() {
    return privateBlockchain;
  }

  /**
   * @return key/value map of extra meta data for this payment info, for example, it could be useful to add information to a transaction, like if a subtoken asset is involved
   */
  @JsonProperty("clientMeta")
  public Optional<Map<String, Object>> getClientMeta() {
    return clientMeta;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CryptoPaymentInformation && equalTo((CryptoPaymentInformation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(CryptoPaymentInformation other) {
    return id.equals(other.id) && walletAddress.equals(other.walletAddress) && currency.equals(other.currency) && network.equals(other.network) && privateBlockchain.equals(other.privateBlockchain) && clientMeta.equals(other.clientMeta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.walletAddress, this.currency, this.network, this.privateBlockchain, this.clientMeta);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static WalletAddressStage builder() {
    return new Builder();
  }

  public interface WalletAddressStage {
    CurrencyStage walletAddress(@NotNull String walletAddress);

    Builder from(CryptoPaymentInformation other);
  }

  public interface CurrencyStage {
    NetworkStage currency(@NotNull String currency);
  }

  public interface NetworkStage {
    _FinalStage network(@NotNull String network);
  }

  public interface _FinalStage {
    CryptoPaymentInformation build();

    _FinalStage id(Optional<String> id);

    _FinalStage id(String id);

    _FinalStage privateBlockchain(Optional<Boolean> privateBlockchain);

    _FinalStage privateBlockchain(Boolean privateBlockchain);

    _FinalStage clientMeta(Optional<Map<String, Object>> clientMeta);

    _FinalStage clientMeta(Map<String, Object> clientMeta);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements WalletAddressStage, CurrencyStage, NetworkStage, _FinalStage {
    private String walletAddress;

    private String currency;

    private String network;

    private Optional<Map<String, Object>> clientMeta = Optional.empty();

    private Optional<Boolean> privateBlockchain = Optional.empty();

    private Optional<String> id = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(CryptoPaymentInformation other) {
      id(other.getId());
      walletAddress(other.getWalletAddress());
      currency(other.getCurrency());
      network(other.getNetwork());
      privateBlockchain(other.getPrivateBlockchain());
      clientMeta(other.getClientMeta());
      return this;
    }

    /**
     * <p>Blockchain address for the Wallet</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("walletAddress")
    public CurrencyStage walletAddress(@NotNull String walletAddress) {
      this.walletAddress = Objects.requireNonNull(walletAddress, "walletAddress must not be null");
      return this;
    }

    /**
     * <p>Token symbol that your User is trading</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("currency")
    public NetworkStage currency(@NotNull String currency) {
      this.currency = Objects.requireNonNull(currency, "currency must not be null");
      return this;
    }

    /**
     * <p>Blockchain network name, example ethereum, bitcoin, solana</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("network")
    public _FinalStage network(@NotNull String network) {
      this.network = Objects.requireNonNull(network, "network must not be null");
      return this;
    }

    /**
     * <p>key/value map of extra meta data for this payment info, for example, it could be useful to add information to a transaction, like if a subtoken asset is involved</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage clientMeta(Map<String, Object> clientMeta) {
      this.clientMeta = Optional.ofNullable(clientMeta);
      return this;
    }

    @Override
    @JsonSetter(
        value = "clientMeta",
        nulls = Nulls.SKIP
    )
    public _FinalStage clientMeta(Optional<Map<String, Object>> clientMeta) {
      this.clientMeta = clientMeta;
      return this;
    }

    /**
     * <p>If blockchain is a private chain</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage privateBlockchain(Boolean privateBlockchain) {
      this.privateBlockchain = Optional.ofNullable(privateBlockchain);
      return this;
    }

    @Override
    @JsonSetter(
        value = "privateBlockchain",
        nulls = Nulls.SKIP
    )
    public _FinalStage privateBlockchain(Optional<Boolean> privateBlockchain) {
      this.privateBlockchain = privateBlockchain;
      return this;
    }

    /**
     * <p>Unique identifier for the Payment Information, must be used to refer to a Payment Information for a payment</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @Override
    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public _FinalStage id(Optional<String> id) {
      this.id = id;
      return this;
    }

    @Override
    public CryptoPaymentInformation build() {
      return new CryptoPaymentInformation(id, walletAddress, currency, network, privateBlockchain, clientMeta, additionalProperties);
    }
  }
}
