/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Phone.Builder.class
)
public final class Phone {
  private final Optional<Boolean> default_;

  private final Optional<String> number;

  private final Optional<String> type;

  private final Map<String, Object> additionalProperties;

  private Phone(Optional<Boolean> default_, Optional<String> number, Optional<String> type,
      Map<String, Object> additionalProperties) {
    this.default_ = default_;
    this.number = number;
    this.type = type;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("default")
  public Optional<Boolean> getDefault() {
    return default_;
  }

  /**
   * @return Phone number, can be formatted using plus sign, spaces, parenthesis or hyphens
   */
  @JsonProperty("number")
  public Optional<String> getNumber() {
    return number;
  }

  @JsonProperty("type")
  public Optional<String> getType() {
    return type;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Phone && equalTo((Phone) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Phone other) {
    return default_.equals(other.default_) && number.equals(other.number) && type.equals(other.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.default_, this.number, this.type);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Boolean> default_ = Optional.empty();

    private Optional<String> number = Optional.empty();

    private Optional<String> type = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Phone other) {
      default_(other.getDefault());
      number(other.getNumber());
      type(other.getType());
      return this;
    }

    @JsonSetter(
        value = "default",
        nulls = Nulls.SKIP
    )
    public Builder default_(Optional<Boolean> default_) {
      this.default_ = default_;
      return this;
    }

    public Builder default_(Boolean default_) {
      this.default_ = Optional.ofNullable(default_);
      return this;
    }

    @JsonSetter(
        value = "number",
        nulls = Nulls.SKIP
    )
    public Builder number(Optional<String> number) {
      this.number = number;
      return this;
    }

    public Builder number(String number) {
      this.number = Optional.ofNullable(number);
      return this;
    }

    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public Builder type(Optional<String> type) {
      this.type = type;
      return this;
    }

    public Builder type(String type) {
      this.type = Optional.ofNullable(type);
      return this;
    }

    public Phone build() {
      return new Phone(default_, number, type, additionalProperties);
    }
  }
}
