/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BusinessBusinessQuestionnaire.Builder.class
)
public final class BusinessBusinessQuestionnaire {
  private final Optional<String> businessDescription;

  private final Optional<String> salesChannels;

  private final Optional<Double> monthlyVolumeUsd;

  private final Optional<Double> annualVolumeUsd;

  private final Optional<String> legalAndDisciplinary;

  private final Optional<String> pePs;

  private final Optional<String> sanctionScreening;

  private final Optional<String> customerIdVerification;

  private final Optional<String> customerRiskRating;

  private final Optional<String> fraudPrevention;

  private final Map<String, Object> additionalProperties;

  private BusinessBusinessQuestionnaire(Optional<String> businessDescription,
      Optional<String> salesChannels, Optional<Double> monthlyVolumeUsd,
      Optional<Double> annualVolumeUsd, Optional<String> legalAndDisciplinary,
      Optional<String> pePs, Optional<String> sanctionScreening,
      Optional<String> customerIdVerification, Optional<String> customerRiskRating,
      Optional<String> fraudPrevention, Map<String, Object> additionalProperties) {
    this.businessDescription = businessDescription;
    this.salesChannels = salesChannels;
    this.monthlyVolumeUsd = monthlyVolumeUsd;
    this.annualVolumeUsd = annualVolumeUsd;
    this.legalAndDisciplinary = legalAndDisciplinary;
    this.pePs = pePs;
    this.sanctionScreening = sanctionScreening;
    this.customerIdVerification = customerIdVerification;
    this.customerRiskRating = customerRiskRating;
    this.fraudPrevention = fraudPrevention;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return A description of the business.
   */
  @JsonProperty("businessDescription")
  public Optional<String> getBusinessDescription() {
    return businessDescription;
  }

  @JsonProperty("salesChannels")
  public Optional<String> getSalesChannels() {
    return salesChannels;
  }

  /**
   * @return Volume of monthly transactions in USD
   */
  @JsonProperty("monthlyVolumeUSD")
  public Optional<Double> getMonthlyVolumeUsd() {
    return monthlyVolumeUsd;
  }

  /**
   * @return Volume of yearly transactions in USD
   */
  @JsonProperty("annualVolumeUSD")
  public Optional<Double> getAnnualVolumeUsd() {
    return annualVolumeUsd;
  }

  @JsonProperty("legalAndDisciplinary")
  public Optional<String> getLegalAndDisciplinary() {
    return legalAndDisciplinary;
  }

  /**
   * @return Any politically exposed persons on staff
   */
  @JsonProperty("PEPs")
  public Optional<String> getPePs() {
    return pePs;
  }

  @JsonProperty("sanctionScreening")
  public Optional<String> getSanctionScreening() {
    return sanctionScreening;
  }

  @JsonProperty("customerIDVerification")
  public Optional<String> getCustomerIdVerification() {
    return customerIdVerification;
  }

  @JsonProperty("customerRiskRating")
  public Optional<String> getCustomerRiskRating() {
    return customerRiskRating;
  }

  @JsonProperty("fraudPrevention")
  public Optional<String> getFraudPrevention() {
    return fraudPrevention;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BusinessBusinessQuestionnaire && equalTo((BusinessBusinessQuestionnaire) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(BusinessBusinessQuestionnaire other) {
    return businessDescription.equals(other.businessDescription) && salesChannels.equals(other.salesChannels) && monthlyVolumeUsd.equals(other.monthlyVolumeUsd) && annualVolumeUsd.equals(other.annualVolumeUsd) && legalAndDisciplinary.equals(other.legalAndDisciplinary) && pePs.equals(other.pePs) && sanctionScreening.equals(other.sanctionScreening) && customerIdVerification.equals(other.customerIdVerification) && customerRiskRating.equals(other.customerRiskRating) && fraudPrevention.equals(other.fraudPrevention);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.businessDescription, this.salesChannels, this.monthlyVolumeUsd, this.annualVolumeUsd, this.legalAndDisciplinary, this.pePs, this.sanctionScreening, this.customerIdVerification, this.customerRiskRating, this.fraudPrevention);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> businessDescription = Optional.empty();

    private Optional<String> salesChannels = Optional.empty();

    private Optional<Double> monthlyVolumeUsd = Optional.empty();

    private Optional<Double> annualVolumeUsd = Optional.empty();

    private Optional<String> legalAndDisciplinary = Optional.empty();

    private Optional<String> pePs = Optional.empty();

    private Optional<String> sanctionScreening = Optional.empty();

    private Optional<String> customerIdVerification = Optional.empty();

    private Optional<String> customerRiskRating = Optional.empty();

    private Optional<String> fraudPrevention = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(BusinessBusinessQuestionnaire other) {
      businessDescription(other.getBusinessDescription());
      salesChannels(other.getSalesChannels());
      monthlyVolumeUsd(other.getMonthlyVolumeUsd());
      annualVolumeUsd(other.getAnnualVolumeUsd());
      legalAndDisciplinary(other.getLegalAndDisciplinary());
      pePs(other.getPePs());
      sanctionScreening(other.getSanctionScreening());
      customerIdVerification(other.getCustomerIdVerification());
      customerRiskRating(other.getCustomerRiskRating());
      fraudPrevention(other.getFraudPrevention());
      return this;
    }

    @JsonSetter(
        value = "businessDescription",
        nulls = Nulls.SKIP
    )
    public Builder businessDescription(Optional<String> businessDescription) {
      this.businessDescription = businessDescription;
      return this;
    }

    public Builder businessDescription(String businessDescription) {
      this.businessDescription = Optional.ofNullable(businessDescription);
      return this;
    }

    @JsonSetter(
        value = "salesChannels",
        nulls = Nulls.SKIP
    )
    public Builder salesChannels(Optional<String> salesChannels) {
      this.salesChannels = salesChannels;
      return this;
    }

    public Builder salesChannels(String salesChannels) {
      this.salesChannels = Optional.ofNullable(salesChannels);
      return this;
    }

    @JsonSetter(
        value = "monthlyVolumeUSD",
        nulls = Nulls.SKIP
    )
    public Builder monthlyVolumeUsd(Optional<Double> monthlyVolumeUsd) {
      this.monthlyVolumeUsd = monthlyVolumeUsd;
      return this;
    }

    public Builder monthlyVolumeUsd(Double monthlyVolumeUsd) {
      this.monthlyVolumeUsd = Optional.ofNullable(monthlyVolumeUsd);
      return this;
    }

    @JsonSetter(
        value = "annualVolumeUSD",
        nulls = Nulls.SKIP
    )
    public Builder annualVolumeUsd(Optional<Double> annualVolumeUsd) {
      this.annualVolumeUsd = annualVolumeUsd;
      return this;
    }

    public Builder annualVolumeUsd(Double annualVolumeUsd) {
      this.annualVolumeUsd = Optional.ofNullable(annualVolumeUsd);
      return this;
    }

    @JsonSetter(
        value = "legalAndDisciplinary",
        nulls = Nulls.SKIP
    )
    public Builder legalAndDisciplinary(Optional<String> legalAndDisciplinary) {
      this.legalAndDisciplinary = legalAndDisciplinary;
      return this;
    }

    public Builder legalAndDisciplinary(String legalAndDisciplinary) {
      this.legalAndDisciplinary = Optional.ofNullable(legalAndDisciplinary);
      return this;
    }

    @JsonSetter(
        value = "PEPs",
        nulls = Nulls.SKIP
    )
    public Builder pePs(Optional<String> pePs) {
      this.pePs = pePs;
      return this;
    }

    public Builder pePs(String pePs) {
      this.pePs = Optional.ofNullable(pePs);
      return this;
    }

    @JsonSetter(
        value = "sanctionScreening",
        nulls = Nulls.SKIP
    )
    public Builder sanctionScreening(Optional<String> sanctionScreening) {
      this.sanctionScreening = sanctionScreening;
      return this;
    }

    public Builder sanctionScreening(String sanctionScreening) {
      this.sanctionScreening = Optional.ofNullable(sanctionScreening);
      return this;
    }

    @JsonSetter(
        value = "customerIDVerification",
        nulls = Nulls.SKIP
    )
    public Builder customerIdVerification(Optional<String> customerIdVerification) {
      this.customerIdVerification = customerIdVerification;
      return this;
    }

    public Builder customerIdVerification(String customerIdVerification) {
      this.customerIdVerification = Optional.ofNullable(customerIdVerification);
      return this;
    }

    @JsonSetter(
        value = "customerRiskRating",
        nulls = Nulls.SKIP
    )
    public Builder customerRiskRating(Optional<String> customerRiskRating) {
      this.customerRiskRating = customerRiskRating;
      return this;
    }

    public Builder customerRiskRating(String customerRiskRating) {
      this.customerRiskRating = Optional.ofNullable(customerRiskRating);
      return this;
    }

    @JsonSetter(
        value = "fraudPrevention",
        nulls = Nulls.SKIP
    )
    public Builder fraudPrevention(Optional<String> fraudPrevention) {
      this.fraudPrevention = fraudPrevention;
      return this;
    }

    public Builder fraudPrevention(String fraudPrevention) {
      this.fraudPrevention = Optional.ofNullable(fraudPrevention);
      return this;
    }

    public BusinessBusinessQuestionnaire build() {
      return new BusinessBusinessQuestionnaire(businessDescription, salesChannels, monthlyVolumeUsd, annualVolumeUsd, legalAndDisciplinary, pePs, sanctionScreening, customerIdVerification, customerRiskRating, fraudPrevention, additionalProperties);
    }
  }
}
