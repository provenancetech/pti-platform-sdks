/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = IdDocumentMetadata.Builder.class
)
public final class IdDocumentMetadata {
  private final Optional<String> personName;

  private final Optional<String> dateOfBirth;

  private final Optional<String> documentNumber;

  private final Optional<String> nationality;

  private final Optional<String> expiryDate;

  private final Map<String, Object> additionalProperties;

  private IdDocumentMetadata(Optional<String> personName, Optional<String> dateOfBirth,
      Optional<String> documentNumber, Optional<String> nationality, Optional<String> expiryDate,
      Map<String, Object> additionalProperties) {
    this.personName = personName;
    this.dateOfBirth = dateOfBirth;
    this.documentNumber = documentNumber;
    this.nationality = nationality;
    this.expiryDate = expiryDate;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("PERSON_NAME")
  public Optional<String> getPersonName() {
    return personName;
  }

  @JsonProperty("DATE_OF_BIRTH")
  public Optional<String> getDateOfBirth() {
    return dateOfBirth;
  }

  @JsonProperty("DOCUMENT_NUMBER")
  public Optional<String> getDocumentNumber() {
    return documentNumber;
  }

  @JsonProperty("NATIONALITY")
  public Optional<String> getNationality() {
    return nationality;
  }

  @JsonProperty("EXPIRY_DATE")
  public Optional<String> getExpiryDate() {
    return expiryDate;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof IdDocumentMetadata && equalTo((IdDocumentMetadata) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(IdDocumentMetadata other) {
    return personName.equals(other.personName) && dateOfBirth.equals(other.dateOfBirth) && documentNumber.equals(other.documentNumber) && nationality.equals(other.nationality) && expiryDate.equals(other.expiryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.personName, this.dateOfBirth, this.documentNumber, this.nationality, this.expiryDate);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> personName = Optional.empty();

    private Optional<String> dateOfBirth = Optional.empty();

    private Optional<String> documentNumber = Optional.empty();

    private Optional<String> nationality = Optional.empty();

    private Optional<String> expiryDate = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(IdDocumentMetadata other) {
      personName(other.getPersonName());
      dateOfBirth(other.getDateOfBirth());
      documentNumber(other.getDocumentNumber());
      nationality(other.getNationality());
      expiryDate(other.getExpiryDate());
      return this;
    }

    @JsonSetter(
        value = "PERSON_NAME",
        nulls = Nulls.SKIP
    )
    public Builder personName(Optional<String> personName) {
      this.personName = personName;
      return this;
    }

    public Builder personName(String personName) {
      this.personName = Optional.ofNullable(personName);
      return this;
    }

    @JsonSetter(
        value = "DATE_OF_BIRTH",
        nulls = Nulls.SKIP
    )
    public Builder dateOfBirth(Optional<String> dateOfBirth) {
      this.dateOfBirth = dateOfBirth;
      return this;
    }

    public Builder dateOfBirth(String dateOfBirth) {
      this.dateOfBirth = Optional.ofNullable(dateOfBirth);
      return this;
    }

    @JsonSetter(
        value = "DOCUMENT_NUMBER",
        nulls = Nulls.SKIP
    )
    public Builder documentNumber(Optional<String> documentNumber) {
      this.documentNumber = documentNumber;
      return this;
    }

    public Builder documentNumber(String documentNumber) {
      this.documentNumber = Optional.ofNullable(documentNumber);
      return this;
    }

    @JsonSetter(
        value = "NATIONALITY",
        nulls = Nulls.SKIP
    )
    public Builder nationality(Optional<String> nationality) {
      this.nationality = nationality;
      return this;
    }

    public Builder nationality(String nationality) {
      this.nationality = Optional.ofNullable(nationality);
      return this;
    }

    @JsonSetter(
        value = "EXPIRY_DATE",
        nulls = Nulls.SKIP
    )
    public Builder expiryDate(Optional<String> expiryDate) {
      this.expiryDate = expiryDate;
      return this;
    }

    public Builder expiryDate(String expiryDate) {
      this.expiryDate = Optional.ofNullable(expiryDate);
      return this;
    }

    public IdDocumentMetadata build() {
      return new IdDocumentMetadata(personName, dateOfBirth, documentNumber, nationality, expiryDate, additionalProperties);
    }
  }
}
