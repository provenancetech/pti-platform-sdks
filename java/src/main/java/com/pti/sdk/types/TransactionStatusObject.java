/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TransactionStatusObject.Builder.class
)
public final class TransactionStatusObject implements IActionStatus {
  private final Optional<ResourceType> resourceType;

  private final Optional<String> requestId;

  private final Optional<String> clientId;

  private final Optional<String> userId;

  private final Optional<String> date;

  private final Optional<TransactionStatus> status;

  private final Optional<TransactionTypeEnum> transactionType;

  private final Optional<PaymentInformationType> paymentMethod;

  private final Optional<PaymentStatusDetail> paymentStatusDetail;

  private final Optional<Double> amount;

  private final Optional<String> transactionGroupId;

  private final Optional<String> billingEmail;

  private final Optional<Total> transactionTotal;

  private final Optional<String> currency;

  private final Optional<Map<String, Object>> additionalInfos;

  private final Map<String, Object> additionalProperties;

  private TransactionStatusObject(Optional<ResourceType> resourceType, Optional<String> requestId,
      Optional<String> clientId, Optional<String> userId, Optional<String> date,
      Optional<TransactionStatus> status, Optional<TransactionTypeEnum> transactionType,
      Optional<PaymentInformationType> paymentMethod,
      Optional<PaymentStatusDetail> paymentStatusDetail, Optional<Double> amount,
      Optional<String> transactionGroupId, Optional<String> billingEmail,
      Optional<Total> transactionTotal, Optional<String> currency,
      Optional<Map<String, Object>> additionalInfos, Map<String, Object> additionalProperties) {
    this.resourceType = resourceType;
    this.requestId = requestId;
    this.clientId = clientId;
    this.userId = userId;
    this.date = date;
    this.status = status;
    this.transactionType = transactionType;
    this.paymentMethod = paymentMethod;
    this.paymentStatusDetail = paymentStatusDetail;
    this.amount = amount;
    this.transactionGroupId = transactionGroupId;
    this.billingEmail = billingEmail;
    this.transactionTotal = transactionTotal;
    this.currency = currency;
    this.additionalInfos = additionalInfos;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("resourceType")
  @java.lang.Override
  public Optional<ResourceType> getResourceType() {
    return resourceType;
  }

  @JsonProperty("requestId")
  @java.lang.Override
  public Optional<String> getRequestId() {
    return requestId;
  }

  @JsonProperty("clientId")
  @java.lang.Override
  public Optional<String> getClientId() {
    return clientId;
  }

  @JsonProperty("userId")
  @java.lang.Override
  public Optional<String> getUserId() {
    return userId;
  }

  /**
   * @return ISO-8601
   */
  @JsonProperty("date")
  @java.lang.Override
  public Optional<String> getDate() {
    return date;
  }

  @JsonProperty("status")
  public Optional<TransactionStatus> getStatus() {
    return status;
  }

  @JsonProperty("transactionType")
  public Optional<TransactionTypeEnum> getTransactionType() {
    return transactionType;
  }

  @JsonProperty("paymentMethod")
  public Optional<PaymentInformationType> getPaymentMethod() {
    return paymentMethod;
  }

  @JsonProperty("paymentStatusDetail")
  public Optional<PaymentStatusDetail> getPaymentStatusDetail() {
    return paymentStatusDetail;
  }

  @JsonProperty("amount")
  public Optional<Double> getAmount() {
    return amount;
  }

  @JsonProperty("transactionGroupId")
  public Optional<String> getTransactionGroupId() {
    return transactionGroupId;
  }

  @JsonProperty("billingEmail")
  public Optional<String> getBillingEmail() {
    return billingEmail;
  }

  @JsonProperty("transactionTotal")
  public Optional<Total> getTransactionTotal() {
    return transactionTotal;
  }

  @JsonProperty("currency")
  public Optional<String> getCurrency() {
    return currency;
  }

  /**
   * @return key/value map of extra information
   */
  @JsonProperty("additionalInfos")
  public Optional<Map<String, Object>> getAdditionalInfos() {
    return additionalInfos;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TransactionStatusObject && equalTo((TransactionStatusObject) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(TransactionStatusObject other) {
    return resourceType.equals(other.resourceType) && requestId.equals(other.requestId) && clientId.equals(other.clientId) && userId.equals(other.userId) && date.equals(other.date) && status.equals(other.status) && transactionType.equals(other.transactionType) && paymentMethod.equals(other.paymentMethod) && paymentStatusDetail.equals(other.paymentStatusDetail) && amount.equals(other.amount) && transactionGroupId.equals(other.transactionGroupId) && billingEmail.equals(other.billingEmail) && transactionTotal.equals(other.transactionTotal) && currency.equals(other.currency) && additionalInfos.equals(other.additionalInfos);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.resourceType, this.requestId, this.clientId, this.userId, this.date, this.status, this.transactionType, this.paymentMethod, this.paymentStatusDetail, this.amount, this.transactionGroupId, this.billingEmail, this.transactionTotal, this.currency, this.additionalInfos);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ResourceType> resourceType = Optional.empty();

    private Optional<String> requestId = Optional.empty();

    private Optional<String> clientId = Optional.empty();

    private Optional<String> userId = Optional.empty();

    private Optional<String> date = Optional.empty();

    private Optional<TransactionStatus> status = Optional.empty();

    private Optional<TransactionTypeEnum> transactionType = Optional.empty();

    private Optional<PaymentInformationType> paymentMethod = Optional.empty();

    private Optional<PaymentStatusDetail> paymentStatusDetail = Optional.empty();

    private Optional<Double> amount = Optional.empty();

    private Optional<String> transactionGroupId = Optional.empty();

    private Optional<String> billingEmail = Optional.empty();

    private Optional<Total> transactionTotal = Optional.empty();

    private Optional<String> currency = Optional.empty();

    private Optional<Map<String, Object>> additionalInfos = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(TransactionStatusObject other) {
      resourceType(other.getResourceType());
      requestId(other.getRequestId());
      clientId(other.getClientId());
      userId(other.getUserId());
      date(other.getDate());
      status(other.getStatus());
      transactionType(other.getTransactionType());
      paymentMethod(other.getPaymentMethod());
      paymentStatusDetail(other.getPaymentStatusDetail());
      amount(other.getAmount());
      transactionGroupId(other.getTransactionGroupId());
      billingEmail(other.getBillingEmail());
      transactionTotal(other.getTransactionTotal());
      currency(other.getCurrency());
      additionalInfos(other.getAdditionalInfos());
      return this;
    }

    @JsonSetter(
        value = "resourceType",
        nulls = Nulls.SKIP
    )
    public Builder resourceType(Optional<ResourceType> resourceType) {
      this.resourceType = resourceType;
      return this;
    }

    public Builder resourceType(ResourceType resourceType) {
      this.resourceType = Optional.ofNullable(resourceType);
      return this;
    }

    @JsonSetter(
        value = "requestId",
        nulls = Nulls.SKIP
    )
    public Builder requestId(Optional<String> requestId) {
      this.requestId = requestId;
      return this;
    }

    public Builder requestId(String requestId) {
      this.requestId = Optional.ofNullable(requestId);
      return this;
    }

    @JsonSetter(
        value = "clientId",
        nulls = Nulls.SKIP
    )
    public Builder clientId(Optional<String> clientId) {
      this.clientId = clientId;
      return this;
    }

    public Builder clientId(String clientId) {
      this.clientId = Optional.ofNullable(clientId);
      return this;
    }

    @JsonSetter(
        value = "userId",
        nulls = Nulls.SKIP
    )
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.ofNullable(userId);
      return this;
    }

    @JsonSetter(
        value = "date",
        nulls = Nulls.SKIP
    )
    public Builder date(Optional<String> date) {
      this.date = date;
      return this;
    }

    public Builder date(String date) {
      this.date = Optional.ofNullable(date);
      return this;
    }

    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public Builder status(Optional<TransactionStatus> status) {
      this.status = status;
      return this;
    }

    public Builder status(TransactionStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    @JsonSetter(
        value = "transactionType",
        nulls = Nulls.SKIP
    )
    public Builder transactionType(Optional<TransactionTypeEnum> transactionType) {
      this.transactionType = transactionType;
      return this;
    }

    public Builder transactionType(TransactionTypeEnum transactionType) {
      this.transactionType = Optional.ofNullable(transactionType);
      return this;
    }

    @JsonSetter(
        value = "paymentMethod",
        nulls = Nulls.SKIP
    )
    public Builder paymentMethod(Optional<PaymentInformationType> paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
    }

    public Builder paymentMethod(PaymentInformationType paymentMethod) {
      this.paymentMethod = Optional.ofNullable(paymentMethod);
      return this;
    }

    @JsonSetter(
        value = "paymentStatusDetail",
        nulls = Nulls.SKIP
    )
    public Builder paymentStatusDetail(Optional<PaymentStatusDetail> paymentStatusDetail) {
      this.paymentStatusDetail = paymentStatusDetail;
      return this;
    }

    public Builder paymentStatusDetail(PaymentStatusDetail paymentStatusDetail) {
      this.paymentStatusDetail = Optional.ofNullable(paymentStatusDetail);
      return this;
    }

    @JsonSetter(
        value = "amount",
        nulls = Nulls.SKIP
    )
    public Builder amount(Optional<Double> amount) {
      this.amount = amount;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = Optional.ofNullable(amount);
      return this;
    }

    @JsonSetter(
        value = "transactionGroupId",
        nulls = Nulls.SKIP
    )
    public Builder transactionGroupId(Optional<String> transactionGroupId) {
      this.transactionGroupId = transactionGroupId;
      return this;
    }

    public Builder transactionGroupId(String transactionGroupId) {
      this.transactionGroupId = Optional.ofNullable(transactionGroupId);
      return this;
    }

    @JsonSetter(
        value = "billingEmail",
        nulls = Nulls.SKIP
    )
    public Builder billingEmail(Optional<String> billingEmail) {
      this.billingEmail = billingEmail;
      return this;
    }

    public Builder billingEmail(String billingEmail) {
      this.billingEmail = Optional.ofNullable(billingEmail);
      return this;
    }

    @JsonSetter(
        value = "transactionTotal",
        nulls = Nulls.SKIP
    )
    public Builder transactionTotal(Optional<Total> transactionTotal) {
      this.transactionTotal = transactionTotal;
      return this;
    }

    public Builder transactionTotal(Total transactionTotal) {
      this.transactionTotal = Optional.ofNullable(transactionTotal);
      return this;
    }

    @JsonSetter(
        value = "currency",
        nulls = Nulls.SKIP
    )
    public Builder currency(Optional<String> currency) {
      this.currency = currency;
      return this;
    }

    public Builder currency(String currency) {
      this.currency = Optional.ofNullable(currency);
      return this;
    }

    @JsonSetter(
        value = "additionalInfos",
        nulls = Nulls.SKIP
    )
    public Builder additionalInfos(Optional<Map<String, Object>> additionalInfos) {
      this.additionalInfos = additionalInfos;
      return this;
    }

    public Builder additionalInfos(Map<String, Object> additionalInfos) {
      this.additionalInfos = Optional.ofNullable(additionalInfos);
      return this;
    }

    public TransactionStatusObject build() {
      return new TransactionStatusObject(resourceType, requestId, clientId, userId, date, status, transactionType, paymentMethod, paymentStatusDetail, amount, transactionGroupId, billingEmail, transactionTotal, currency, additionalInfos, additionalProperties);
    }
  }
}
