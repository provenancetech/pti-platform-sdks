/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserStatusObject.Builder.class
)
public final class UserStatusObject {
  private final Optional<ResourceType> resourceType;

  private final Optional<String> clientId;

  private final Optional<String> userId;

  private final Optional<UserStatusReason> statusReason;

  private final Optional<UserStatus> status;

  private final Map<String, Object> additionalProperties;

  private UserStatusObject(Optional<ResourceType> resourceType, Optional<String> clientId,
      Optional<String> userId, Optional<UserStatusReason> statusReason, Optional<UserStatus> status,
      Map<String, Object> additionalProperties) {
    this.resourceType = resourceType;
    this.clientId = clientId;
    this.userId = userId;
    this.statusReason = statusReason;
    this.status = status;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("resourceType")
  public Optional<ResourceType> getResourceType() {
    return resourceType;
  }

  @JsonProperty("clientId")
  public Optional<String> getClientId() {
    return clientId;
  }

  @JsonProperty("userId")
  public Optional<String> getUserId() {
    return userId;
  }

  @JsonProperty("statusReason")
  public Optional<UserStatusReason> getStatusReason() {
    return statusReason;
  }

  @JsonProperty("status")
  public Optional<UserStatus> getStatus() {
    return status;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserStatusObject && equalTo((UserStatusObject) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UserStatusObject other) {
    return resourceType.equals(other.resourceType) && clientId.equals(other.clientId) && userId.equals(other.userId) && statusReason.equals(other.statusReason) && status.equals(other.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.resourceType, this.clientId, this.userId, this.statusReason, this.status);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ResourceType> resourceType = Optional.empty();

    private Optional<String> clientId = Optional.empty();

    private Optional<String> userId = Optional.empty();

    private Optional<UserStatusReason> statusReason = Optional.empty();

    private Optional<UserStatus> status = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UserStatusObject other) {
      resourceType(other.getResourceType());
      clientId(other.getClientId());
      userId(other.getUserId());
      statusReason(other.getStatusReason());
      status(other.getStatus());
      return this;
    }

    @JsonSetter(
        value = "resourceType",
        nulls = Nulls.SKIP
    )
    public Builder resourceType(Optional<ResourceType> resourceType) {
      this.resourceType = resourceType;
      return this;
    }

    public Builder resourceType(ResourceType resourceType) {
      this.resourceType = Optional.ofNullable(resourceType);
      return this;
    }

    @JsonSetter(
        value = "clientId",
        nulls = Nulls.SKIP
    )
    public Builder clientId(Optional<String> clientId) {
      this.clientId = clientId;
      return this;
    }

    public Builder clientId(String clientId) {
      this.clientId = Optional.ofNullable(clientId);
      return this;
    }

    @JsonSetter(
        value = "userId",
        nulls = Nulls.SKIP
    )
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.ofNullable(userId);
      return this;
    }

    @JsonSetter(
        value = "statusReason",
        nulls = Nulls.SKIP
    )
    public Builder statusReason(Optional<UserStatusReason> statusReason) {
      this.statusReason = statusReason;
      return this;
    }

    public Builder statusReason(UserStatusReason statusReason) {
      this.statusReason = Optional.ofNullable(statusReason);
      return this;
    }

    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public Builder status(Optional<UserStatus> status) {
      this.status = status;
      return this;
    }

    public Builder status(UserStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    public UserStatusObject build() {
      return new UserStatusObject(resourceType, clientId, userId, statusReason, status, additionalProperties);
    }
  }
}
