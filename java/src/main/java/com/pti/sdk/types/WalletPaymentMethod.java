/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WalletPaymentMethod.Builder.class
)
public final class WalletPaymentMethod {
  private final Optional<String> billingEmail;

  private final Optional<Wallet> paymentInformation;

  private final Map<String, Object> additionalProperties;

  private WalletPaymentMethod(Optional<String> billingEmail, Optional<Wallet> paymentInformation,
      Map<String, Object> additionalProperties) {
    this.billingEmail = billingEmail;
    this.paymentInformation = paymentInformation;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("billingEmail")
  public Optional<String> getBillingEmail() {
    return billingEmail;
  }

  @JsonProperty("paymentInformation")
  public Optional<Wallet> getPaymentInformation() {
    return paymentInformation;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WalletPaymentMethod && equalTo((WalletPaymentMethod) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WalletPaymentMethod other) {
    return billingEmail.equals(other.billingEmail) && paymentInformation.equals(other.paymentInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.billingEmail, this.paymentInformation);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> billingEmail = Optional.empty();

    private Optional<Wallet> paymentInformation = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(WalletPaymentMethod other) {
      billingEmail(other.getBillingEmail());
      paymentInformation(other.getPaymentInformation());
      return this;
    }

    @JsonSetter(
        value = "billingEmail",
        nulls = Nulls.SKIP
    )
    public Builder billingEmail(Optional<String> billingEmail) {
      this.billingEmail = billingEmail;
      return this;
    }

    public Builder billingEmail(String billingEmail) {
      this.billingEmail = Optional.ofNullable(billingEmail);
      return this;
    }

    @JsonSetter(
        value = "paymentInformation",
        nulls = Nulls.SKIP
    )
    public Builder paymentInformation(Optional<Wallet> paymentInformation) {
      this.paymentInformation = paymentInformation;
      return this;
    }

    public Builder paymentInformation(Wallet paymentInformation) {
      this.paymentInformation = Optional.ofNullable(paymentInformation);
      return this;
    }

    public WalletPaymentMethod build() {
      return new WalletPaymentMethod(billingEmail, paymentInformation, additionalProperties);
    }
  }
}
