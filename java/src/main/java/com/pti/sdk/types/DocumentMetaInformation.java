/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = DocumentMetaInformation.Builder.class
)
public final class DocumentMetaInformation {
  private final DocumentMetaInformationDocumentType documentType;

  private final String contentType;

  private final Optional<String> originalFileName;

  private final Optional<Integer> fileSize;

  private final Optional<Map<String, String>> tags;

  private final Optional<String> fileId;

  private final Map<String, Object> additionalProperties;

  private DocumentMetaInformation(DocumentMetaInformationDocumentType documentType,
      String contentType, Optional<String> originalFileName, Optional<Integer> fileSize,
      Optional<Map<String, String>> tags, Optional<String> fileId,
      Map<String, Object> additionalProperties) {
    this.documentType = documentType;
    this.contentType = contentType;
    this.originalFileName = originalFileName;
    this.fileSize = fileSize;
    this.tags = tags;
    this.fileId = fileId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("documentType")
  public DocumentMetaInformationDocumentType getDocumentType() {
    return documentType;
  }

  @JsonProperty("contentType")
  public String getContentType() {
    return contentType;
  }

  @JsonProperty("originalFileName")
  public Optional<String> getOriginalFileName() {
    return originalFileName;
  }

  @JsonProperty("fileSize")
  public Optional<Integer> getFileSize() {
    return fileSize;
  }

  @JsonProperty("tags")
  public Optional<Map<String, String>> getTags() {
    return tags;
  }

  @JsonProperty("fileId")
  public Optional<String> getFileId() {
    return fileId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DocumentMetaInformation && equalTo((DocumentMetaInformation) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(DocumentMetaInformation other) {
    return documentType.equals(other.documentType) && contentType.equals(other.contentType) && originalFileName.equals(other.originalFileName) && fileSize.equals(other.fileSize) && tags.equals(other.tags) && fileId.equals(other.fileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.documentType, this.contentType, this.originalFileName, this.fileSize, this.tags, this.fileId);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DocumentTypeStage builder() {
    return new Builder();
  }

  public interface DocumentTypeStage {
    ContentTypeStage documentType(@NotNull DocumentMetaInformationDocumentType documentType);

    Builder from(DocumentMetaInformation other);
  }

  public interface ContentTypeStage {
    _FinalStage contentType(@NotNull String contentType);
  }

  public interface _FinalStage {
    DocumentMetaInformation build();

    _FinalStage originalFileName(Optional<String> originalFileName);

    _FinalStage originalFileName(String originalFileName);

    _FinalStage fileSize(Optional<Integer> fileSize);

    _FinalStage fileSize(Integer fileSize);

    _FinalStage tags(Optional<Map<String, String>> tags);

    _FinalStage tags(Map<String, String> tags);

    _FinalStage fileId(Optional<String> fileId);

    _FinalStage fileId(String fileId);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DocumentTypeStage, ContentTypeStage, _FinalStage {
    private DocumentMetaInformationDocumentType documentType;

    private String contentType;

    private Optional<String> fileId = Optional.empty();

    private Optional<Map<String, String>> tags = Optional.empty();

    private Optional<Integer> fileSize = Optional.empty();

    private Optional<String> originalFileName = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(DocumentMetaInformation other) {
      documentType(other.getDocumentType());
      contentType(other.getContentType());
      originalFileName(other.getOriginalFileName());
      fileSize(other.getFileSize());
      tags(other.getTags());
      fileId(other.getFileId());
      return this;
    }

    @Override
    @JsonSetter("documentType")
    public ContentTypeStage documentType(
        @NotNull DocumentMetaInformationDocumentType documentType) {
      this.documentType = Objects.requireNonNull(documentType, "documentType must not be null");
      return this;
    }

    @Override
    @JsonSetter("contentType")
    public _FinalStage contentType(@NotNull String contentType) {
      this.contentType = Objects.requireNonNull(contentType, "contentType must not be null");
      return this;
    }

    @Override
    public _FinalStage fileId(String fileId) {
      this.fileId = Optional.ofNullable(fileId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "fileId",
        nulls = Nulls.SKIP
    )
    public _FinalStage fileId(Optional<String> fileId) {
      this.fileId = fileId;
      return this;
    }

    @Override
    public _FinalStage tags(Map<String, String> tags) {
      this.tags = Optional.ofNullable(tags);
      return this;
    }

    @Override
    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public _FinalStage tags(Optional<Map<String, String>> tags) {
      this.tags = tags;
      return this;
    }

    @Override
    public _FinalStage fileSize(Integer fileSize) {
      this.fileSize = Optional.ofNullable(fileSize);
      return this;
    }

    @Override
    @JsonSetter(
        value = "fileSize",
        nulls = Nulls.SKIP
    )
    public _FinalStage fileSize(Optional<Integer> fileSize) {
      this.fileSize = fileSize;
      return this;
    }

    @Override
    public _FinalStage originalFileName(String originalFileName) {
      this.originalFileName = Optional.ofNullable(originalFileName);
      return this;
    }

    @Override
    @JsonSetter(
        value = "originalFileName",
        nulls = Nulls.SKIP
    )
    public _FinalStage originalFileName(Optional<String> originalFileName) {
      this.originalFileName = originalFileName;
      return this;
    }

    @Override
    public DocumentMetaInformation build() {
      return new DocumentMetaInformation(documentType, contentType, originalFileName, fileSize, tags, fileId, additionalProperties);
    }
  }
}
