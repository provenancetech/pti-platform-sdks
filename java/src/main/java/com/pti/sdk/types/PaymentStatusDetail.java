/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PaymentStatusDetail.Builder.class
)
public final class PaymentStatusDetail {
  private final Optional<ProviderResponseCode> providerResponseCode;

  private final Optional<ProviderResponseCategory> providerResponseCategory;

  private final Map<String, Object> additionalProperties;

  private PaymentStatusDetail(Optional<ProviderResponseCode> providerResponseCode,
      Optional<ProviderResponseCategory> providerResponseCategory,
      Map<String, Object> additionalProperties) {
    this.providerResponseCode = providerResponseCode;
    this.providerResponseCategory = providerResponseCategory;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("providerResponseCode")
  public Optional<ProviderResponseCode> getProviderResponseCode() {
    return providerResponseCode;
  }

  @JsonProperty("providerResponseCategory")
  public Optional<ProviderResponseCategory> getProviderResponseCategory() {
    return providerResponseCategory;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PaymentStatusDetail && equalTo((PaymentStatusDetail) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PaymentStatusDetail other) {
    return providerResponseCode.equals(other.providerResponseCode) && providerResponseCategory.equals(other.providerResponseCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.providerResponseCode, this.providerResponseCategory);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ProviderResponseCode> providerResponseCode = Optional.empty();

    private Optional<ProviderResponseCategory> providerResponseCategory = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(PaymentStatusDetail other) {
      providerResponseCode(other.getProviderResponseCode());
      providerResponseCategory(other.getProviderResponseCategory());
      return this;
    }

    @JsonSetter(
        value = "providerResponseCode",
        nulls = Nulls.SKIP
    )
    public Builder providerResponseCode(Optional<ProviderResponseCode> providerResponseCode) {
      this.providerResponseCode = providerResponseCode;
      return this;
    }

    public Builder providerResponseCode(ProviderResponseCode providerResponseCode) {
      this.providerResponseCode = Optional.ofNullable(providerResponseCode);
      return this;
    }

    @JsonSetter(
        value = "providerResponseCategory",
        nulls = Nulls.SKIP
    )
    public Builder providerResponseCategory(
        Optional<ProviderResponseCategory> providerResponseCategory) {
      this.providerResponseCategory = providerResponseCategory;
      return this;
    }

    public Builder providerResponseCategory(ProviderResponseCategory providerResponseCategory) {
      this.providerResponseCategory = Optional.ofNullable(providerResponseCategory);
      return this;
    }

    public PaymentStatusDetail build() {
      return new PaymentStatusDetail(providerResponseCode, providerResponseCategory, additionalProperties);
    }
  }
}
