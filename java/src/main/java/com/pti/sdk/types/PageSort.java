/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PageSort.Builder.class
)
public final class PageSort {
  private final Optional<Boolean> sorted;

  private final Optional<Boolean> unsorted;

  private final Optional<Boolean> empty;

  private final Map<String, Object> additionalProperties;

  private PageSort(Optional<Boolean> sorted, Optional<Boolean> unsorted, Optional<Boolean> empty,
      Map<String, Object> additionalProperties) {
    this.sorted = sorted;
    this.unsorted = unsorted;
    this.empty = empty;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("sorted")
  public Optional<Boolean> getSorted() {
    return sorted;
  }

  @JsonProperty("unsorted")
  public Optional<Boolean> getUnsorted() {
    return unsorted;
  }

  @JsonProperty("empty")
  public Optional<Boolean> getEmpty() {
    return empty;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PageSort && equalTo((PageSort) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PageSort other) {
    return sorted.equals(other.sorted) && unsorted.equals(other.unsorted) && empty.equals(other.empty);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.sorted, this.unsorted, this.empty);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Boolean> sorted = Optional.empty();

    private Optional<Boolean> unsorted = Optional.empty();

    private Optional<Boolean> empty = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(PageSort other) {
      sorted(other.getSorted());
      unsorted(other.getUnsorted());
      empty(other.getEmpty());
      return this;
    }

    @JsonSetter(
        value = "sorted",
        nulls = Nulls.SKIP
    )
    public Builder sorted(Optional<Boolean> sorted) {
      this.sorted = sorted;
      return this;
    }

    public Builder sorted(Boolean sorted) {
      this.sorted = Optional.ofNullable(sorted);
      return this;
    }

    @JsonSetter(
        value = "unsorted",
        nulls = Nulls.SKIP
    )
    public Builder unsorted(Optional<Boolean> unsorted) {
      this.unsorted = unsorted;
      return this;
    }

    public Builder unsorted(Boolean unsorted) {
      this.unsorted = Optional.ofNullable(unsorted);
      return this;
    }

    @JsonSetter(
        value = "empty",
        nulls = Nulls.SKIP
    )
    public Builder empty(Optional<Boolean> empty) {
      this.empty = empty;
      return this;
    }

    public Builder empty(Boolean empty) {
      this.empty = Optional.ofNullable(empty);
      return this;
    }

    public PageSort build() {
      return new PageSort(sorted, unsorted, empty, additionalProperties);
    }
  }
}
