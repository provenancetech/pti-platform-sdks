/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Wallet.Builder.class
)
public final class Wallet {
  private final Optional<String> walletId;

  private final Optional<String> label;

  private final Optional<CurrencyEnum> currency;

  private final Optional<BlockChainEnum> network;

  private final Optional<Double> availableBalance;

  private final Optional<Double> lockedBalance;

  private final Optional<Double> pendingBalance;

  private final Optional<Double> totalBalance;

  private final Optional<Map<String, Object>> depositInstruction;

  private final Optional<String> createDateTime;

  private final Optional<Boolean> multiWalletAddress;

  private final Optional<String> type;

  private final Map<String, Object> additionalProperties;

  private Wallet(Optional<String> walletId, Optional<String> label, Optional<CurrencyEnum> currency,
      Optional<BlockChainEnum> network, Optional<Double> availableBalance,
      Optional<Double> lockedBalance, Optional<Double> pendingBalance,
      Optional<Double> totalBalance, Optional<Map<String, Object>> depositInstruction,
      Optional<String> createDateTime, Optional<Boolean> multiWalletAddress, Optional<String> type,
      Map<String, Object> additionalProperties) {
    this.walletId = walletId;
    this.label = label;
    this.currency = currency;
    this.network = network;
    this.availableBalance = availableBalance;
    this.lockedBalance = lockedBalance;
    this.pendingBalance = pendingBalance;
    this.totalBalance = totalBalance;
    this.depositInstruction = depositInstruction;
    this.createDateTime = createDateTime;
    this.multiWalletAddress = multiWalletAddress;
    this.type = type;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("walletId")
  public Optional<String> getWalletId() {
    return walletId;
  }

  @JsonProperty("label")
  public Optional<String> getLabel() {
    return label;
  }

  @JsonProperty("currency")
  public Optional<CurrencyEnum> getCurrency() {
    return currency;
  }

  @JsonProperty("network")
  public Optional<BlockChainEnum> getNetwork() {
    return network;
  }

  @JsonProperty("availableBalance")
  public Optional<Double> getAvailableBalance() {
    return availableBalance;
  }

  @JsonProperty("lockedBalance")
  public Optional<Double> getLockedBalance() {
    return lockedBalance;
  }

  @JsonProperty("pendingBalance")
  public Optional<Double> getPendingBalance() {
    return pendingBalance;
  }

  @JsonProperty("totalBalance")
  public Optional<Double> getTotalBalance() {
    return totalBalance;
  }

  /**
   * @return External reference to the Wallet(could be bank account number, or blockchain address)
   */
  @JsonProperty("depositInstruction")
  public Optional<Map<String, Object>> getDepositInstruction() {
    return depositInstruction;
  }

  @JsonProperty("createDateTime")
  public Optional<String> getCreateDateTime() {
    return createDateTime;
  }

  @JsonProperty("multiWalletAddress")
  public Optional<Boolean> getMultiWalletAddress() {
    return multiWalletAddress;
  }

  @JsonProperty("type")
  public Optional<String> getType() {
    return type;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Wallet && equalTo((Wallet) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Wallet other) {
    return walletId.equals(other.walletId) && label.equals(other.label) && currency.equals(other.currency) && network.equals(other.network) && availableBalance.equals(other.availableBalance) && lockedBalance.equals(other.lockedBalance) && pendingBalance.equals(other.pendingBalance) && totalBalance.equals(other.totalBalance) && depositInstruction.equals(other.depositInstruction) && createDateTime.equals(other.createDateTime) && multiWalletAddress.equals(other.multiWalletAddress) && type.equals(other.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.walletId, this.label, this.currency, this.network, this.availableBalance, this.lockedBalance, this.pendingBalance, this.totalBalance, this.depositInstruction, this.createDateTime, this.multiWalletAddress, this.type);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> walletId = Optional.empty();

    private Optional<String> label = Optional.empty();

    private Optional<CurrencyEnum> currency = Optional.empty();

    private Optional<BlockChainEnum> network = Optional.empty();

    private Optional<Double> availableBalance = Optional.empty();

    private Optional<Double> lockedBalance = Optional.empty();

    private Optional<Double> pendingBalance = Optional.empty();

    private Optional<Double> totalBalance = Optional.empty();

    private Optional<Map<String, Object>> depositInstruction = Optional.empty();

    private Optional<String> createDateTime = Optional.empty();

    private Optional<Boolean> multiWalletAddress = Optional.empty();

    private Optional<String> type = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Wallet other) {
      walletId(other.getWalletId());
      label(other.getLabel());
      currency(other.getCurrency());
      network(other.getNetwork());
      availableBalance(other.getAvailableBalance());
      lockedBalance(other.getLockedBalance());
      pendingBalance(other.getPendingBalance());
      totalBalance(other.getTotalBalance());
      depositInstruction(other.getDepositInstruction());
      createDateTime(other.getCreateDateTime());
      multiWalletAddress(other.getMultiWalletAddress());
      type(other.getType());
      return this;
    }

    @JsonSetter(
        value = "walletId",
        nulls = Nulls.SKIP
    )
    public Builder walletId(Optional<String> walletId) {
      this.walletId = walletId;
      return this;
    }

    public Builder walletId(String walletId) {
      this.walletId = Optional.ofNullable(walletId);
      return this;
    }

    @JsonSetter(
        value = "label",
        nulls = Nulls.SKIP
    )
    public Builder label(Optional<String> label) {
      this.label = label;
      return this;
    }

    public Builder label(String label) {
      this.label = Optional.ofNullable(label);
      return this;
    }

    @JsonSetter(
        value = "currency",
        nulls = Nulls.SKIP
    )
    public Builder currency(Optional<CurrencyEnum> currency) {
      this.currency = currency;
      return this;
    }

    public Builder currency(CurrencyEnum currency) {
      this.currency = Optional.ofNullable(currency);
      return this;
    }

    @JsonSetter(
        value = "network",
        nulls = Nulls.SKIP
    )
    public Builder network(Optional<BlockChainEnum> network) {
      this.network = network;
      return this;
    }

    public Builder network(BlockChainEnum network) {
      this.network = Optional.ofNullable(network);
      return this;
    }

    @JsonSetter(
        value = "availableBalance",
        nulls = Nulls.SKIP
    )
    public Builder availableBalance(Optional<Double> availableBalance) {
      this.availableBalance = availableBalance;
      return this;
    }

    public Builder availableBalance(Double availableBalance) {
      this.availableBalance = Optional.ofNullable(availableBalance);
      return this;
    }

    @JsonSetter(
        value = "lockedBalance",
        nulls = Nulls.SKIP
    )
    public Builder lockedBalance(Optional<Double> lockedBalance) {
      this.lockedBalance = lockedBalance;
      return this;
    }

    public Builder lockedBalance(Double lockedBalance) {
      this.lockedBalance = Optional.ofNullable(lockedBalance);
      return this;
    }

    @JsonSetter(
        value = "pendingBalance",
        nulls = Nulls.SKIP
    )
    public Builder pendingBalance(Optional<Double> pendingBalance) {
      this.pendingBalance = pendingBalance;
      return this;
    }

    public Builder pendingBalance(Double pendingBalance) {
      this.pendingBalance = Optional.ofNullable(pendingBalance);
      return this;
    }

    @JsonSetter(
        value = "totalBalance",
        nulls = Nulls.SKIP
    )
    public Builder totalBalance(Optional<Double> totalBalance) {
      this.totalBalance = totalBalance;
      return this;
    }

    public Builder totalBalance(Double totalBalance) {
      this.totalBalance = Optional.ofNullable(totalBalance);
      return this;
    }

    @JsonSetter(
        value = "depositInstruction",
        nulls = Nulls.SKIP
    )
    public Builder depositInstruction(Optional<Map<String, Object>> depositInstruction) {
      this.depositInstruction = depositInstruction;
      return this;
    }

    public Builder depositInstruction(Map<String, Object> depositInstruction) {
      this.depositInstruction = Optional.ofNullable(depositInstruction);
      return this;
    }

    @JsonSetter(
        value = "createDateTime",
        nulls = Nulls.SKIP
    )
    public Builder createDateTime(Optional<String> createDateTime) {
      this.createDateTime = createDateTime;
      return this;
    }

    public Builder createDateTime(String createDateTime) {
      this.createDateTime = Optional.ofNullable(createDateTime);
      return this;
    }

    @JsonSetter(
        value = "multiWalletAddress",
        nulls = Nulls.SKIP
    )
    public Builder multiWalletAddress(Optional<Boolean> multiWalletAddress) {
      this.multiWalletAddress = multiWalletAddress;
      return this;
    }

    public Builder multiWalletAddress(Boolean multiWalletAddress) {
      this.multiWalletAddress = Optional.ofNullable(multiWalletAddress);
      return this;
    }

    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public Builder type(Optional<String> type) {
      this.type = type;
      return this;
    }

    public Builder type(String type) {
      this.type = Optional.ofNullable(type);
      return this;
    }

    public Wallet build() {
      return new Wallet(walletId, label, currency, network, availableBalance, lockedBalance, pendingBalance, totalBalance, depositInstruction, createDateTime, multiWalletAddress, type, additionalProperties);
    }
  }
}
