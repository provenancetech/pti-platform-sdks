/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pti.sdk.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Wallet.Builder.class
)
public final class Wallet {
  private final Optional<String> walletId;

  private final String label;

  private final CurrencyEnum currency;

  private final Optional<BlockChainEnum> network;

  private final Optional<Double> balance;

  private final Optional<Map<String, Object>> depositInstruction;

  private final Optional<String> createDateTime;

  private final Map<String, Object> additionalProperties;

  private Wallet(Optional<String> walletId, String label, CurrencyEnum currency,
      Optional<BlockChainEnum> network, Optional<Double> balance,
      Optional<Map<String, Object>> depositInstruction, Optional<String> createDateTime,
      Map<String, Object> additionalProperties) {
    this.walletId = walletId;
    this.label = label;
    this.currency = currency;
    this.network = network;
    this.balance = balance;
    this.depositInstruction = depositInstruction;
    this.createDateTime = createDateTime;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("walletId")
  public Optional<String> getWalletId() {
    return walletId;
  }

  @JsonProperty("label")
  public String getLabel() {
    return label;
  }

  @JsonProperty("currency")
  public CurrencyEnum getCurrency() {
    return currency;
  }

  @JsonProperty("network")
  public Optional<BlockChainEnum> getNetwork() {
    return network;
  }

  @JsonProperty("balance")
  public Optional<Double> getBalance() {
    return balance;
  }

  /**
   * @return External reference to the wallet(could be bank account number, or blockchain address)
   */
  @JsonProperty("depositInstruction")
  public Optional<Map<String, Object>> getDepositInstruction() {
    return depositInstruction;
  }

  @JsonProperty("createDateTime")
  public Optional<String> getCreateDateTime() {
    return createDateTime;
  }

  @JsonProperty("type")
  public String getType() {
    return "WALLET";
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Wallet && equalTo((Wallet) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Wallet other) {
    return walletId.equals(other.walletId) && label.equals(other.label) && currency.equals(other.currency) && network.equals(other.network) && balance.equals(other.balance) && depositInstruction.equals(other.depositInstruction) && createDateTime.equals(other.createDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.walletId, this.label, this.currency, this.network, this.balance, this.depositInstruction, this.createDateTime);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static LabelStage builder() {
    return new Builder();
  }

  public interface LabelStage {
    CurrencyStage label(@NotNull String label);

    Builder from(Wallet other);
  }

  public interface CurrencyStage {
    _FinalStage currency(@NotNull CurrencyEnum currency);
  }

  public interface _FinalStage {
    Wallet build();

    _FinalStage walletId(Optional<String> walletId);

    _FinalStage walletId(String walletId);

    _FinalStage network(Optional<BlockChainEnum> network);

    _FinalStage network(BlockChainEnum network);

    _FinalStage balance(Optional<Double> balance);

    _FinalStage balance(Double balance);

    _FinalStage depositInstruction(Optional<Map<String, Object>> depositInstruction);

    _FinalStage depositInstruction(Map<String, Object> depositInstruction);

    _FinalStage createDateTime(Optional<String> createDateTime);

    _FinalStage createDateTime(String createDateTime);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements LabelStage, CurrencyStage, _FinalStage {
    private String label;

    private CurrencyEnum currency;

    private Optional<String> createDateTime = Optional.empty();

    private Optional<Map<String, Object>> depositInstruction = Optional.empty();

    private Optional<Double> balance = Optional.empty();

    private Optional<BlockChainEnum> network = Optional.empty();

    private Optional<String> walletId = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(Wallet other) {
      walletId(other.getWalletId());
      label(other.getLabel());
      currency(other.getCurrency());
      network(other.getNetwork());
      balance(other.getBalance());
      depositInstruction(other.getDepositInstruction());
      createDateTime(other.getCreateDateTime());
      return this;
    }

    @Override
    @JsonSetter("label")
    public CurrencyStage label(@NotNull String label) {
      this.label = Objects.requireNonNull(label, "label must not be null");
      return this;
    }

    @Override
    @JsonSetter("currency")
    public _FinalStage currency(@NotNull CurrencyEnum currency) {
      this.currency = Objects.requireNonNull(currency, "currency must not be null");
      return this;
    }

    @Override
    public _FinalStage createDateTime(String createDateTime) {
      this.createDateTime = Optional.ofNullable(createDateTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "createDateTime",
        nulls = Nulls.SKIP
    )
    public _FinalStage createDateTime(Optional<String> createDateTime) {
      this.createDateTime = createDateTime;
      return this;
    }

    /**
     * <p>External reference to the wallet(could be bank account number, or blockchain address)</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage depositInstruction(Map<String, Object> depositInstruction) {
      this.depositInstruction = Optional.ofNullable(depositInstruction);
      return this;
    }

    @Override
    @JsonSetter(
        value = "depositInstruction",
        nulls = Nulls.SKIP
    )
    public _FinalStage depositInstruction(Optional<Map<String, Object>> depositInstruction) {
      this.depositInstruction = depositInstruction;
      return this;
    }

    @Override
    public _FinalStage balance(Double balance) {
      this.balance = Optional.ofNullable(balance);
      return this;
    }

    @Override
    @JsonSetter(
        value = "balance",
        nulls = Nulls.SKIP
    )
    public _FinalStage balance(Optional<Double> balance) {
      this.balance = balance;
      return this;
    }

    @Override
    public _FinalStage network(BlockChainEnum network) {
      this.network = Optional.ofNullable(network);
      return this;
    }

    @Override
    @JsonSetter(
        value = "network",
        nulls = Nulls.SKIP
    )
    public _FinalStage network(Optional<BlockChainEnum> network) {
      this.network = network;
      return this;
    }

    @Override
    public _FinalStage walletId(String walletId) {
      this.walletId = Optional.ofNullable(walletId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "walletId",
        nulls = Nulls.SKIP
    )
    public _FinalStage walletId(Optional<String> walletId) {
      this.walletId = walletId;
      return this;
    }

    @Override
    public Wallet build() {
      return new Wallet(walletId, label, currency, network, balance, depositInstruction, createDateTime, additionalProperties);
    }
  }
}
