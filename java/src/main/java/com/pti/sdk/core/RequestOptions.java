/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.pti.sdk.core;

import java.lang.Integer;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

@SuppressWarnings("OptionalUsedAsFieldOrParameterType")
public final class RequestOptions {
  private final String forwardedForIpAddress;

  private final Optional<Integer> timeout;

  private final TimeUnit timeoutTimeUnit;

  private RequestOptions(String forwardedForIpAddress, Optional<Integer> timeout,
                         TimeUnit timeoutTimeUnit) {
    this.forwardedForIpAddress = forwardedForIpAddress;
    this.timeout = timeout;
    this.timeoutTimeUnit = timeoutTimeUnit;
  }

  public Optional<Integer> getTimeout() {
    return timeout;
  }

  public TimeUnit getTimeoutTimeUnit() {
    return timeoutTimeUnit;
  }

  public Map<String, String> getHeaders() {
    Map<String, String> headers = new HashMap<>();
    if (this.forwardedForIpAddress != null) {
      headers.put("X-Forwarded-For", this.forwardedForIpAddress);
    }
    return headers;
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unused")
  public static final class Builder {
    private String forwardedForIpAddress = null;

    private Optional<Integer> timeout = Optional.empty();

    private TimeUnit timeoutTimeUnit = TimeUnit.SECONDS;

    public Builder forwardedForIpAddress(String forwardedForIpAddress) {
      this.forwardedForIpAddress = forwardedForIpAddress;
      return this;
    }

    public Builder timeout(Integer timeout) {
      this.timeout = Optional.of(timeout);
      return this;
    }

    public Builder timeout(Integer timeout, TimeUnit timeoutTimeUnit) {
      this.timeout = Optional.of(timeout);
      this.timeoutTimeUnit = timeoutTimeUnit;
      return this;
    }

    public RequestOptions build() {
      return new RequestOptions(forwardedForIpAddress, timeout, timeoutTimeUnit);
    }
  }
}
