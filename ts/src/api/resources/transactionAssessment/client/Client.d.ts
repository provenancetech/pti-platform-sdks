/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PTI from "../../../index";
export declare namespace TransactionAssessment {
    interface Options {
        environment?: core.Supplier<environments.PTIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-pti-client-id header */
        ptiClientId?: core.Supplier<PTI.UuidLikeStr | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pti-client-id header */
        ptiClientId?: PTI.UuidLikeStr | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class TransactionAssessment {
    protected readonly _options: TransactionAssessment.Options;
    constructor(_options?: TransactionAssessment.Options);
    /**
     * This endpoint is used to assess a Transaction. The Transaction Assessment and User information requirement are evaluated. This step is also done when executing a Transaction, but it can be called as a standalone.
     *
     * @param {PTI.AssessTransactionRequest} request
     * @param {TransactionAssessment.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.UnprocessableEntityError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.transactionAssessment.assessTransaction({
     *         ptiRequestId: "x-pti-request-id",
     *         ptiScenarioId: "x-pti-scenario-id",
     *         body: {
     *             transactionGroupId: "c8d8ed2a-33df-463b-95af-e59ff6e16414",
     *             transactionTotal: {
     *                 fee: {
     *                     amount: 10,
     *                     currency: "USD"
     *                 },
     *                 total: {
     *                     amount: 100,
     *                     currency: "USD"
     *                 },
     *                 subtotal: {
     *                     amount: 90,
     *                     currency: "USD"
     *                 }
     *             },
     *             usdValue: 100,
     *             amount: 100,
     *             date: "2024-12-13T18:46:40.666+00:00",
     *             initiator: {
     *                 type: "PERSON",
     *                 id: "id"
     *             },
     *             type: "DEPOSIT",
     *             sourceMethod: {
     *                 paymentMethodType: "CREDIT_CARD"
     *             },
     *             destinationMethod: {
     *                 paymentMethodType: "WALLET"
     *             }
     *         }
     *     })
     */
    assessTransaction(request: PTI.AssessTransactionRequest, requestOptions?: TransactionAssessment.RequestOptions): Promise<PTI.ObjectReference>;
    /**
     * Retrieves the status of a specific transaction assessment by its request ID.
     * The response includes details such as the assessment result, risk level, and
     * relevant evaluation metadata.
     *
     * @param {PTI.UuidLikeStr} requestId
     * @param {TransactionAssessment.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.transactionAssessment.getTransactionAssess("requestId")
     */
    getTransactionAssess(requestId: PTI.UuidLikeStr, requestOptions?: TransactionAssessment.RequestOptions): Promise<PTI.TransactionAssessStatusObject>;
    /**
     * Validates whether a User is allowed to perform a specific Transaction.
     * The response indicates whether the transaction is allowed and may return
     * validation errors if the transaction violates any rules.
     *
     * @param {PTI.TransactionInformationAssessmentRequest} request
     * @param {TransactionAssessment.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.transactionAssessment.transactionInformationAssessment({
     *         ptiRequestId: "x-pti-request-id",
     *         ptiScenarioId: "x-pti-scenario-id",
     *         body: {
     *             transactionGroupId: "c8d8ed2a-33df-463b-95af-e59ff6e16414",
     *             transactionTotal: {
     *                 fee: {
     *                     amount: 10,
     *                     currency: "USD"
     *                 },
     *                 total: {
     *                     amount: 100,
     *                     currency: "USD"
     *                 },
     *                 subtotal: {
     *                     amount: 90,
     *                     currency: "USD"
     *                 }
     *             },
     *             usdValue: 100,
     *             amount: 100,
     *             date: "2024-12-13T18:46:40.666+00:00",
     *             initiator: {
     *                 type: "PERSON",
     *                 id: "id"
     *             },
     *             type: "DEPOSIT",
     *             sourceMethod: {
     *                 paymentMethodType: "CREDIT_CARD"
     *             },
     *             destinationMethod: {
     *                 paymentMethodType: "WALLET"
     *             }
     *         }
     *     })
     */
    transactionInformationAssessment(request: PTI.TransactionInformationAssessmentRequest, requestOptions?: TransactionAssessment.RequestOptions): Promise<PTI.OneOfAssessmentValidationError>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
