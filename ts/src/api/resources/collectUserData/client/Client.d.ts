/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PTI from "../../../index";
import * as fs from "fs";
export declare namespace CollectUserData {
    interface Options {
        environment?: core.Supplier<environments.PTIEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the x-pti-client-id header */
        ptiClientId?: core.Supplier<PTI.UuidLikeStr | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pti-client-id header */
        ptiClientId?: PTI.UuidLikeStr | undefined;
    }
}
export declare class CollectUserData {
    protected readonly _options: CollectUserData.Options;
    constructor(_options: CollectUserData.Options);
    /**
     * @param {PTI.GetListOfUsersRequest} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.getListOfUsers()
     */
    getListOfUsers(request?: PTI.GetListOfUsersRequest, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.UserPage>;
    /**
     * @param {PTI.OneOfUserSubTypes} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ConflictError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.addAUser({
     *         type: "BUSINESS",
     *         id: "36dbe68f-2747-41c6-8748-559588fd3248",
     *         sourceOfFunds: "Creator earnings",
     *         addresses: [{
     *                 streetAddress: "1, main street",
     *                 city: "New Hampshire",
     *                 postalCode: "10005",
     *                 stateCode: "US-NH",
     *                 country: "US",
     *                 default: true
     *             }],
     *         emails: [{
     *                 default: true,
     *                 address: "johnsmith@test.com"
     *             }],
     *         mainRepresentative: {
     *             ownershipPercent: 1,
     *             person: {
     *                 id: "id"
     *             }
     *         },
     *         phones: [{
     *                 default: true,
     *                 number: "12345678901",
     *                 type: "WORK"
     *             }]
     *     })
     */
    addAUser(request: PTI.OneOfUserSubTypes, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfUserSubTypes>;
    /**
     * @param {PTI.OneOfUserSubTypes} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.updateUser({
     *         type: "BUSINESS",
     *         id: "string",
     *         mainRepresentative: {
     *             ownershipPercent: 1,
     *             person: {
     *                 id: "id"
     *             }
     *         }
     *     })
     */
    updateUser(request: PTI.OneOfUserSubTypes, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfUserSubTypes>;
    /**
     * @param {PTI.OneOfUserSubTypes} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.mergeUserInfo({
     *         type: "BUSINESS",
     *         id: "string",
     *         mainRepresentative: {
     *             ownershipPercent: 1,
     *             person: {
     *                 id: "id"
     *             }
     *         }
     *     })
     */
    mergeUserInfo(request: PTI.OneOfUserSubTypes, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfUserSubTypes>;
    /**
     * This endpoint is used to get the information for a specific user. The information returned is the information that was collected for the user. PII information is not returned.
     *
     * @param {string} userId
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.getUser("userId")
     */
    getUser(userId: string, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfUserSubTypes>;
    /**
     * This endpoint is used to get the payment information for a specific user. The information returned is the information that was collected for the user. You can filter by payment information type
     *
     * @param {string} userId
     * @param {PTI.GetUserPaymentInformationsRequest} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.getUserPaymentInformations("userId")
     */
    getUserPaymentInformations(userId: string, request?: PTI.GetUserPaymentInformationsRequest, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation[]>;
    /**
     * This endpoint is used to add a payment information for a specific user.
     *
     * @param {string} userId
     * @param {PTI.OneOfExternalPaymentInformation} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.addUserPaymentInformation("userId", {
     *         type: "CRYPTO",
     *         walletAddress: "string",
     *         currency: "string",
     *         network: "string"
     *     })
     */
    addUserPaymentInformation(userId: string, request: PTI.OneOfExternalPaymentInformation, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    /**
     * This endpoint is used to get a payment information for a specific user.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.getUserPaymentInformation("userId", "paymentInformationId")
     */
    getUserPaymentInformation(userId: string, paymentInformationId: string, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    /**
     * This endpoint is used to delete a payment information for a specific user.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.deleteUserPaymentInformations("userId", "paymentInformationId")
     */
    deleteUserPaymentInformations(userId: string, paymentInformationId: string, requestOptions?: CollectUserData.RequestOptions): Promise<void>;
    /**
     * This endpoint is used to update a payment information for a specific user. Note: This endpoint does not support updating Credit Cards.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {PTI.OneOfExternalPaymentInformation} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.updatePaymentInformation("userId", "paymentInformationId", {
     *         type: "CRYPTO",
     *         walletAddress: "string",
     *         currency: "string",
     *         network: "string"
     *     })
     */
    updatePaymentInformation(userId: string, paymentInformationId: string, request: PTI.OneOfExternalPaymentInformation, requestOptions?: CollectUserData.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    /**
     * @param {File | fs.ReadStream | undefined} document
     * @param {string} userId
     * @param {PTI.UploadDocumentRequest} request
     * @param {CollectUserData.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.collectUserData.uploadDocument(fs.createReadStream("/path/to/your/file"), "userId", {})
     */
    uploadDocument(document: File | fs.ReadStream | undefined, userId: string, request: PTI.UploadDocumentRequest, requestOptions?: CollectUserData.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
