/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PTI from "../../../index";
export declare namespace PaymentInformation {
    interface Options {
        environment?: core.Supplier<environments.PTIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-pti-client-id header */
        ptiClientId?: core.Supplier<PTI.UuidLikeStr | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pti-client-id header */
        ptiClientId?: PTI.UuidLikeStr | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class PaymentInformation {
    protected readonly _options: PaymentInformation.Options;
    constructor(_options?: PaymentInformation.Options);
    /**
     * This endpoint is used to get the Payment Information for a specific User. The information returned is the information that was collected for the User. You can filter by Payment Information type
     *
     * @param {string} userId
     * @param {PTI.GetUserPaymentInformationsRequest} request
     * @param {PaymentInformation.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.paymentInformation.getUserPaymentInformations("userId")
     */
    getUserPaymentInformations(userId: string, request?: PTI.GetUserPaymentInformationsRequest, requestOptions?: PaymentInformation.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation[]>;
    /**
     * This endpoint is used to add a Payment Information for a specific User.
     *
     * @param {string} userId
     * @param {PTI.OneOfExternalPaymentInformation} request
     * @param {PaymentInformation.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.paymentInformation.addUserPaymentInformation("userId", {
     *         type: "BANK_ACCOUNT"
     *     })
     */
    addUserPaymentInformation(userId: string, request: PTI.OneOfExternalPaymentInformation, requestOptions?: PaymentInformation.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    /**
     * This endpoint is used to get a Payment Information for a specific User.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {PaymentInformation.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.paymentInformation.getUserPaymentInformation("userId", "paymentInformationId")
     */
    getUserPaymentInformation(userId: string, paymentInformationId: string, requestOptions?: PaymentInformation.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    /**
     * This endpoint is used to delete a Payment Information for a specific User.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {PaymentInformation.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.paymentInformation.deleteUserPaymentInformations("userId", "paymentInformationId")
     */
    deleteUserPaymentInformations(userId: string, paymentInformationId: string, requestOptions?: PaymentInformation.RequestOptions): Promise<void>;
    /**
     * This endpoint is used to update a Payment Information for a specific User. Note: This endpoint does not support updating Credit Cards.
     *
     * @param {string} userId
     * @param {string} paymentInformationId
     * @param {PTI.OneOfExternalPaymentInformation} request
     * @param {PaymentInformation.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.paymentInformation.updatePaymentInformation("userId", "paymentInformationId", {
     *         type: "BANK_ACCOUNT"
     *     })
     */
    updatePaymentInformation(userId: string, paymentInformationId: string, request: PTI.OneOfExternalPaymentInformation, requestOptions?: PaymentInformation.RequestOptions): Promise<PTI.OneOfExternalPaymentInformation>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
