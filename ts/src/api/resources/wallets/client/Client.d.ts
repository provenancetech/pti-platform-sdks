/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PTI from "../../../index";
export declare namespace Wallets {
    interface Options {
        environment?: core.Supplier<environments.PTIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-pti-client-id header */
        ptiClientId?: core.Supplier<PTI.UuidLikeStr | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pti-client-id header */
        ptiClientId?: PTI.UuidLikeStr | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Wallets {
    protected readonly _options: Wallets.Options;
    constructor(_options?: Wallets.Options);
    /**
     * Retrieves a list of all assets supported by the platform. Each asset includes
     * its currency, type, and, for cryptocurrencies, the networks on which it is
     * supported. This information is useful for wallet operations, transactions,
     * and trading.
     *
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getListOfAssets()
     */
    getListOfAssets(requestOptions?: Wallets.RequestOptions): Promise<PTI.CurrencyAsset[]>;
    /**
     * Retrieves a list of wallets for a specific user. Each wallet includes the wallet type,
     * unique ID, currency, associated blockchain network (if applicable), optional label,
     * multi-address support flag, and creation date. The endpoint returns up to 100 wallets
     * per request.
     *
     * @param {string} userId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWallets("userId")
     */
    getWallets(userId: string, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet[]>;
    /**
     * Creates a new wallet for a specific user. The request includes the wallet type,
     * a unique wallet ID, the currency, and for cryptocurrencies, the blockchain network.
     * Optional fields include a human-readable label and whether the wallet supports multiple
     * addresses. The newly created wallet can then be used for transactions, deposits, or
     * other wallet-related operations.
     *
     * @param {string} userId
     * @param {PTI.WalletCreation} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWallet("userId", {
     *         id: "ffffffff-6129-4bda-8a10-8ef234dff30e",
     *         currency: "ETH",
     *         network: "ETHEREUM"
     *     })
     */
    createWallet(userId: string, request: PTI.WalletCreation, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * Retrieves a specific wallet for a user by its walletId. The response includes the
     * wallet's currency, network, type, optional label, balance information, creation
     * timestamp, and other relevant metadata.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWallet("userId", "walletId")
     */
    getWallet(userId: string, walletId: string, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * Deletes a specific wallet for the given user. The wallet to be deleted is identified
     * by its walletId. Only wallets with a zero balance can be deleted; wallets containing
     * funds cannot be removed. Once deleted, the wallet and any associated metadata will
     * no longer be accessible.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.deleteWallet("userId", "walletId")
     */
    deleteWallet(userId: string, walletId: string, requestOptions?: Wallets.RequestOptions): Promise<void>;
    /**
     * Simulates a deposit into a user's wallet without actually processing a real
     * transaction. The request specifies the amount and the payment method type.
     * The response provides the expected result of the deposit, including status
     * and any applicable metadata, allowing you to validate transaction behavior
     * before executing real deposits.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.SimulateDepositRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.simulateWalletDeposit("userId", "walletId", {
     *         amount: 100,
     *         paymentMethodType: "ACH",
     *         status: "COMPLETED"
     *     })
     */
    simulateWalletDeposit(userId: string, walletId: string, request?: PTI.SimulateDepositRequest, requestOptions?: Wallets.RequestOptions): Promise<void>;
    /**
     * Creates a new deposit address for a user's cryptocurrency wallet.
     * This allows the user to receive crypto deposits on the specified wallet.
     * The response includes the wallet details along with its deposit instructions.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.DepositAddressRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWalletDepositAddress("userId", "walletId")
     */
    createWalletDepositAddress(userId: string, walletId: string, request?: PTI.DepositAddressRequest, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * Creates a virtual bank account associated with a user's wallet.
     * This account can be used to receive fiat deposits directly into the wallet.
     * The response returns the wallet details along with the virtual bank account
     * and its deposit instruction.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {Record<string, unknown>} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWalletVirtualBankAccount("userId", "walletId", {
     *         "key": "value"
     *     })
     */
    createWalletVirtualBankAccount(userId: string, walletId: string, request: Record<string, unknown>, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * Generates wire transfer instructions for a user's wallet to facilitate
     * fiat deposits. The response includes the wallet details along with
     * the generated wire instructions for completing the deposit.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {Record<string, unknown>} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.generateWireInstructions("userId", "walletId", {
     *         "key": "value"
     *     })
     */
    generateWireInstructions(userId: string, walletId: string, request: Record<string, unknown>, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * Retrieves the historical balance and transaction records for a specific user's wallet.
     * Supports pagination using `page` and `size` query parameters. Each entry in the history
     * includes details about deposits, withdrawals, and other balance-affecting operations.
     *
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.GetWalletHistoryRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWalletHistory("userId", "walletId")
     */
    getWalletHistory(userId: string, walletId: string, request?: PTI.GetWalletHistoryRequest, requestOptions?: Wallets.RequestOptions): Promise<PTI.WalletHistoryPage>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
