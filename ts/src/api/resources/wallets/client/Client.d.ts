/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PTI from "../../../index";
export declare namespace Wallets {
    interface Options {
        environment?: core.Supplier<environments.PTIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the x-pti-client-id header */
        ptiClientId?: core.Supplier<PTI.UuidLikeStr | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pti-client-id header */
        ptiClientId?: PTI.UuidLikeStr | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Wallets {
    protected readonly _options: Wallets.Options;
    constructor(_options: Wallets.Options);
    /**
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getListOfAssets()
     */
    getListOfAssets(requestOptions?: Wallets.RequestOptions): Promise<PTI.CurrencyAsset[]>;
    /**
     * @param {string} userId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWallets("userId")
     */
    getWallets(userId: string, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet[]>;
    /**
     * @param {string} userId
     * @param {PTI.WalletCreation} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWallet("userId", {
     *         id: "ffffffff-6129-4bda-8a10-8ef234dff30e",
     *         currency: "ETH",
     *         network: "ETHEREUM"
     *     })
     */
    createWallet(userId: string, request: PTI.WalletCreation, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWallet("userId", "walletId")
     */
    getWallet(userId: string, walletId: string, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.deleteWallet("userId", "walletId")
     */
    deleteWallet(userId: string, walletId: string, requestOptions?: Wallets.RequestOptions): Promise<void>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.SimulateDepositRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.simulateWalletDeposit("userId", "walletId", {
     *         amount: 100,
     *         paymentMethodType: "ACH",
     *         status: "COMPLETED"
     *     })
     */
    simulateWalletDeposit(userId: string, walletId: string, request?: PTI.SimulateDepositRequest, requestOptions?: Wallets.RequestOptions): Promise<void>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.DepositAddressRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWalletDepositAddress("userId", "walletId")
     */
    createWalletDepositAddress(userId: string, walletId: string, request?: PTI.DepositAddressRequest, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {Record<string, unknown>} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.createWalletVirtualBankAccount("userId", "walletId", {
     *         "key": "value"
     *     })
     */
    createWalletVirtualBankAccount(userId: string, walletId: string, request: Record<string, unknown>, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {Record<string, unknown>} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.BadRequestError}
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.generateWireInstructions("userId", "walletId", {
     *         "key": "value"
     *     })
     */
    generateWireInstructions(userId: string, walletId: string, request: Record<string, unknown>, requestOptions?: Wallets.RequestOptions): Promise<PTI.Wallet>;
    /**
     * @param {string} userId
     * @param {string} walletId
     * @param {PTI.GetWalletHistoryRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link PTI.UnauthorizedError}
     * @throws {@link PTI.ForbiddenError}
     * @throws {@link PTI.NotFoundError}
     * @throws {@link PTI.TooManyRequestsError}
     *
     * @example
     *     await client.wallets.getWalletHistory("userId", "walletId")
     */
    getWalletHistory(userId: string, walletId: string, request?: PTI.GetWalletHistoryRequest, requestOptions?: Wallets.RequestOptions): Promise<PTI.WalletHistoryPage>;
    protected _getAuthorizationHeader(): Promise<string>;
}
